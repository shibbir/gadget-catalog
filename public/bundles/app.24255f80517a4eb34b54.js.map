{"version":3,"file":"app.24255f80517a4eb34b54.js","mappings":"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","sources":["webpack://gadget-catalog/./src/modules/user/client/user.types.js","webpack://gadget-catalog/./src/modules/user/client/user.reducer.js","webpack://gadget-catalog/./src/modules/item/client/item.types.js","webpack://gadget-catalog/./src/modules/item/client/item.reducer.js","webpack://gadget-catalog/./src/modules/brand/client/brand.types.js","webpack://gadget-catalog/./src/modules/brand/client/brand.reducer.js","webpack://gadget-catalog/./src/modules/category/client/category.types.js","webpack://gadget-catalog/./src/modules/category/client/category.reducer.js","webpack://gadget-catalog/./src/modules/core/client/reducers.js","webpack://gadget-catalog/./src/modules/core/client/store.js","webpack://gadget-catalog/./src/modules/core/client/NoMatch.js","webpack://gadget-catalog/./src/modules/core/client/PublicLayoutRoute.js","webpack://gadget-catalog/./src/modules/core/client/components/Navbar.js","webpack://gadget-catalog/./src/modules/core/client/components/footer.component.js","webpack://gadget-catalog/./src/modules/core/client/PrivateLayoutRoute.js","webpack://gadget-catalog/./src/modules/user/client/user.schema.js","webpack://gadget-catalog/./src/modules/core/client/components/IdentityProviders.js","webpack://gadget-catalog/./src/modules/core/client/components/FieldInputs.js","webpack://gadget-catalog/./src/modules/user/client/components/login.component.js","webpack://gadget-catalog/./src/modules/user/client/user.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/register.component.js","webpack://gadget-catalog/./src/modules/user/client/components/ResetPassword.js","webpack://gadget-catalog/./src/modules/user/client/components/ManageOauth.js","webpack://gadget-catalog/./src/modules/user/client/components/ChangePassword.js","webpack://gadget-catalog/./src/modules/user/client/components/profile.component.js","webpack://gadget-catalog/./src/modules/item/client/item.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/ItemChart.js","webpack://gadget-catalog/./src/modules/category/client/category.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/CategoryChart.js","webpack://gadget-catalog/./src/modules/user/client/components/dashboard.component.js","webpack://gadget-catalog/./src/modules/item/client/item.schema.js","webpack://gadget-catalog/./src/modules/brand/client/brand.actions.js","webpack://gadget-catalog/./src/modules/item/client/components/item-form.component.js","webpack://gadget-catalog/./src/modules/item/client/components/item.component.js","webpack://gadget-catalog/./src/modules/item/client/components/items.component.js","webpack://gadget-catalog/./src/modules/brand/client/brand.schema.js","webpack://gadget-catalog/./src/modules/brand/client/brand-form.component.js","webpack://gadget-catalog/./src/modules/brand/client/brands.component.js","webpack://gadget-catalog/./src/modules/category/client/category.schema.js","webpack://gadget-catalog/./src/modules/category/client/components/category-form.component.js","webpack://gadget-catalog/./src/modules/category/client/components/categories.component.js","webpack://gadget-catalog/./src/modules/core/client/app.component.js","webpack://gadget-catalog/./src/modules/core/client/main.js"],"sourcesContent":["export default {\r\n    LOGIN: \"LOGIN\",\r\n    LOGIN_FULFILLED: \"LOGIN_FULFILLED\",\r\n    REGISTER: \"REGISTER\",\r\n    REGISTER_FULFILLED: \"REGISTER_FULFILLED\",\r\n    GET_PROFILE: \"GET_PROFILE\",\r\n    GET_PROFILE_FULFILLED: \"GET_PROFILE_FULFILLED\",\r\n    CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\r\n    RESET_PASSWORD: \"RESET_PASSWORD\",\r\n    DISCONNECT_PROVIDER: \"DISCONNECT_PROVIDER\",\r\n    DISCONNECT_PROVIDER_FULFILLED: \"DISCONNECT_PROVIDER_FULFILLED\"\r\n};\r\n","import Types from \"./user.types\";\r\n\r\nconst initialState = {\r\n    loggedInUser: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.LOGIN_FULFILLED:\r\n        case Types.REGISTER_FULFILLED:\r\n        case Types.GET_PROFILE_FULFILLED:\r\n        case Types.DISCONNECT_PROVIDER_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                loggedInUser: action.payload.data\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    POST_ITEM: \"POST_ITEM\",\r\n    POST_ITEM_FULFILLED: \"POST_ITEM_FULFILLED\",\r\n    POST_ITEM_REJECTED: \"POST_ITEM_REJECTED\",\r\n    PUT_ITEM: \"PUT_ITEM\",\r\n    PUT_ITEM_FULFILLED: \"PUT_ITEM_FULFILLED\",\r\n    PUT_ITEM_REJECTED: \"PUT_ITEM_REJECTED\",\r\n    GET_ITEM: \"GET_ITEM\",\r\n    GET_ITEM_PENDING: \"GET_ITEM_PENDING\",\r\n    GET_ITEM_FULFILLED: \"GET_ITEM_FULFILLED\",\r\n    GET_ITEM_REJECTED: \"GET_ITEM_REJECTED\",\r\n    GET_ITEMS: \"GET_ITEMS\",\r\n    GET_ITEMS_FULFILLED: \"GET_ITEMS_FULFILLED\",\r\n    DELETE_ITEM: \"DELETE_ITEM\",\r\n    DELETE_ITEM_FULFILLED: \"DELETE_ITEM_FULFILLED\",\r\n    DELETE_ITEM_IMAGE: \"DELETE_ITEM_IMAGE\",\r\n    UPDATE_ITEM_IMAGE: \"UPDATE_ITEM_IMAGE\",\r\n    UPDATE_ITEM_IMAGE_FULFILLED: \"UPDATE_ITEM_IMAGE_FULFILLED\",\r\n    DELETE_ITEM_IMAGE_FULFILLED: \"DELETE_ITEM_IMAGE_FULFILLED\",\r\n    GET_ITEMS_BY_YEAR: \"GET_ITEMS_BY_YEAR\",\r\n    GET_ITEMS_BY_YEAR_FULFILLED: \"GET_ITEMS_BY_YEAR_FULFILLED\"\r\n};\r\n","import Types from \"./item.types\";\r\n\r\nconst initialState = {\r\n    item: null,\r\n    itemsPerYear: null,\r\n    items: { data: [], metadata: { pages: [] }}\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch(action.type) {\r\n        case Types.GET_ITEM_PENDING: {\r\n            return { ...state };\r\n        }\r\n        case Types.GET_ITEM_FULFILLED: {\r\n            return { ...state, item: action.payload.data };\r\n        }\r\n        case Types.GET_ITEMS_FULFILLED: {\r\n            return { ...state, items: { data: action.payload.data.data, metadata: action.payload.data.metadata }};\r\n        }\r\n        case Types.UPDATE_ITEM_IMAGE_FULFILLED:\r\n        case Types.DELETE_ITEM_IMAGE_FULFILLED: {\r\n            return { ...state, item: { ...state.item, files: action.payload.data.files }};\r\n        }\r\n        case Types.GET_ITEMS_BY_YEAR_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                itemsPerYear: action.payload.data\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    GET_BRANDS: \"GET_BRANDS\",\r\n    GET_BRANDS_FULFILLED: \"GET_BRANDS_FULFILLED\",\r\n    POST_BRAND: \"POST_BRAND\",\r\n    POST_BRAND_FULFILLED: \"POST_BRAND_FULFILLED\",\r\n    PUT_BRAND: \"PUT_BRAND\",\r\n    PUT_BRAND_FULFILLED: \"PUT_BRAND_FULFILLED\",\r\n    GET_BRAND: \"GET_BRAND\",\r\n    GET_BRAND_FULFILLED: \"GET_BRAND_FULFILLED\"\r\n};\r\n","import Types from \"./brand.types\";\r\n\r\nconst initialState = {\r\n    brands: [],\r\n    brand: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.GET_BRANDS_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                brands: action.payload.data\r\n            };\r\n        }\r\n        case Types.GET_BRAND_FULFILLED: {\r\n            return { ...state, brand: action.payload.data };\r\n        }\r\n        case Types.POST_BRAND_FULFILLED: {\r\n            return { ...state, brands: state.brands.concat(action.payload.data) };\r\n        }\r\n        case Types.PUT_BRAND_FULFILLED: {\r\n            const brands = state.brands.map(function(x) {\r\n                if(x._id === action.payload.data._id) {\r\n                    x.name = action.payload.data.name;\r\n                }\r\n                return x;\r\n            });\r\n            return { ...state, brands: brands };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    GET_CATEGORIES: \"GET_CATEGORIES\",\r\n    GET_CATEGORIES_FULFILLED: \"GET_CATEGORIES_FULFILLED\",\r\n    GET_CATEGORIES_REJECTED: \"GET_CATEGORIES_REJECTED\",\r\n    POST_CATEGORY: \"POST_CATEGORY\",\r\n    POST_CATEGORY_FULFILLED: \"POST_CATEGORY_FULFILLED\",\r\n    PUT_CATEGORY: \"PUT_CATEGORY\",\r\n    PUT_CATEGORY_FULFILLED: \"PUT_CATEGORY_FULFILLED\",\r\n    PUT_CATEGORY_REJECTED: \"PUT_CATEGORY_REJECTED\",\r\n    GET_CATEGORY: \"GET_CATEGORY\",\r\n    GET_CATEGORY_PENDING: \"GET_CATEGORY_PENDING\",\r\n    GET_CATEGORY_FULFILLED: \"GET_CATEGORY_FULFILLED\",\r\n    GET_CATEGORY_REJECTED: \"GET_CATEGORY_REJECTED\"\r\n};\r\n","import Types from \"./category.types\";\r\n\r\nconst initialState = {\r\n    categories: [],\r\n    category: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.GET_CATEGORIES_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                categories: action.payload.data\r\n            };\r\n        }\r\n        case Types.GET_CATEGORY_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                category: action.payload.data\r\n            };\r\n        }\r\n        case Types.PUT_CATEGORY_REJECTED: {\r\n            return state;\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"../../user/client/user.reducer\";\r\nimport itemReducer from \"../../item/client/item.reducer\";\r\nimport brandReducer from \"../../brand/client/brand.reducer\";\r\nimport categoryReducer from \"../../category/client/category.reducer\";\r\n\r\nexport default combineReducers({\r\n    userReducer,\r\n    itemReducer,\r\n    brandReducer,\r\n    categoryReducer\r\n})\r\n","import promise from \"redux-promise-middleware\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport default configureStore({\r\n    reducer: reducers,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false }).concat(promise)\r\n});\r\n","import React from \"react\";\r\nimport { Container, Icon, Header, Divider, Segment, Button } from \"semantic-ui-react\";\r\n\r\nexport default function NoMatch() {\r\n    return (\r\n        <Container>\r\n            <Divider hidden/>\r\n            <Segment placeholder>\r\n                <Header icon>\r\n                    <Icon name=\"search\" color=\"red\"/>\r\n                    The page you are looking for might have been removed had its name changed or is temporarily unavailable.\r\n                </Header>\r\n                <Segment.Inline>\r\n                    <Button primary href=\"/\">GO HOME</Button>\r\n                </Segment.Inline>\r\n            </Segment>\r\n        </Container>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Outlet, Navigate, useLocation } from \"react-router\";\r\n\r\nexport default function PublicLayoutRoute() {\r\n    const location = useLocation();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        loggedInUser ? (\r\n            <Navigate to={ location.state?.from?.pathname || \"/\" } state={{ from: location }} replace/>\r\n        ) : (\r\n            <Outlet/>\r\n        )\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router\";\r\nimport { Menu, Container, Icon } from \"semantic-ui-react\";\r\n\r\nexport default function Navbar() {\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        <Menu stackable borderless>\r\n            <Container>\r\n                <Menu.Item header style={{paddingLeft: 0}}>\r\n                    <img src=\"/images/logo.png\"/>\r\n                </Menu.Item>\r\n                <NavLink to=\"/\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"dashboard\" color=\"teal\"/>\r\n                    Dashboard\r\n                </NavLink>\r\n                <NavLink to=\"/items\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"desktop\" color=\"teal\"/> Manage Items\r\n                </NavLink>\r\n                <NavLink to=\"/categories\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"sitemap\" color=\"teal\"/> Manage Categories\r\n                </NavLink>\r\n                <NavLink to=\"/brands\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"apple\" color=\"teal\"/> Manage Brands\r\n                </NavLink>\r\n                <div className=\"right item\" style={{paddingRight: 0}}>\r\n                    <NavLink to=\"/profile\" className=\"ui button teal\"><Icon name=\"user\"/> {loggedInUser.name}</NavLink>\r\n                    <a href=\"/api/logout\" className=\"ui button black\" style={{marginLeft: '5px'}}><Icon name=\"sign out\"/> Sign Out</a>\r\n                </div>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className=\"ui inverted vertical footer segment\">\r\n            <div className=\"ui center aligned container\">\r\n                <div className=\"ui stackable inverted divided grid\">\r\n                    <div className=\"four wide column\">\r\n                        <h4 className=\"ui inverted header\">Community</h4>\r\n                        <div className=\"ui inverted link list\">\r\n                            <a className=\"item\" href=\"https://github.com/shibbir/gadget-catalog\">GitHub</a>\r\n                            <a className=\"item\" href=\"https://github.com/shibbir/gadget-catalog/issues\">Issues</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"four wide column\">\r\n                        <h4 className=\"ui inverted header\">Technology stack</h4>\r\n                        <div className=\"ui inverted link list\">\r\n                            <a className=\"item\" href=\"https://reactjs.org/\">React</a>\r\n                            <a className=\"item\" href=\"https://react-redux.js.org/\">Redux</a>\r\n                            <a className=\"item\" href=\"https://expressjs.com/\">Express</a>\r\n                            <a className=\"item\" href=\"https://www.mongodb.com/\">MongoDB</a>\r\n                            <a className=\"item\" href=\"https://www.passportjs.org/\">Passport</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"eight wide right floated column\">\r\n                        <h4 className=\"ui inverted teal header\">Help Preserve This Project!</h4>\r\n                        <p>\r\n                            Developed by <a href=\"https://shibbir.io\">Shibbir Ahmed</a>.\r\n                            Code licensed <a rel=\"license\" href=\"https://github.com/shibbir/gadget-catalog/blob/master/LICENSE\">MIT</a>.\r\n                        </p>\r\n                        <Button className=\"large teal\" href=\"https://github.com/shibbir/gadget-catalog\">\r\n                            <Icon name=\"github\"/> Star\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Container, Divider } from \"semantic-ui-react\";\r\nimport { Outlet, Navigate, useLocation } from \"react-router\";\r\n\r\nimport Navbar from \"./components/Navbar\";\r\nimport Footer from \"./components/footer.component\";\r\n\r\nexport default function PrivateLayoutRoute() {\r\n    const location = useLocation();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        loggedInUser ? (\r\n            <>\r\n                <Navbar/>\r\n                <Container className=\"site-content\">\r\n                    <Outlet/>\r\n                    <Divider hidden/>\r\n                </Container>\r\n                <Footer/>\r\n            </>\r\n        ) : (\r\n            <Navigate to=\"login\" state={{ from: location }} replace/>\r\n        )\r\n    );\r\n}\r\n","import { string, object, ref } from \"yup\";\r\n\r\nexport const loginSchema = object().shape({\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .required(\"This field must not be empty.\"),\r\n    password: string()\r\n        .required(\"This field must not be empty.\")\r\n});\r\n\r\nexport const registerSchema = object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(25, \"This field must be at most 25 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .max(30, \"This field must be at most 30 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    password: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n\r\nexport const changePasswordSchema = object().shape({\r\n    currentPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    newPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    confirmNewPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n        .oneOf([ref(\"newPassword\"), null], \"Passwords doesn't match.\")\r\n});\r\n\r\nexport const resetPasswordSchema = object().shape({\r\n    newPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    confirmNewPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n        .oneOf([ref(\"newPassword\"), null], \"Passwords doesn't match.\")\r\n});\r\n\r\nexport const forgotPasswordSchema = object().shape({\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import React from \"react\";\r\nimport { Button, Segment, Icon, Divider } from \"semantic-ui-react\";\r\n\r\nexport default function IdentityProviders() {\r\n    return (\r\n        <>\r\n            <Divider hidden/>\r\n            <Segment className=\"stacked center aligned\">\r\n                <Divider horizontal>or, use third party identity providers</Divider>\r\n                <div>\r\n                    <Button color=\"facebook\" href=\"/auth/facebook\">\r\n                        <Icon name=\"facebook\"/> Facebook\r\n                    </Button>\r\n                    <Button color=\"google plus\" href=\"/auth/google\">\r\n                        <Icon name=\"google plus\"/> Google\r\n                    </Button>\r\n                </div>\r\n            </Segment>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { Form, Icon } from \"semantic-ui-react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\n\r\nexport const TextInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            { attributes.icon &&\r\n                <div className=\"ui fluid input left icon\">\r\n                    <Icon name={attributes.icon}/>\r\n                    <Field type={attributes.type} name={attributes.name} placeholder={attributes.placeholder} autoComplete={attributes.autoComplete } />\r\n                </div>\r\n            }\r\n\r\n            { !attributes.icon &&\r\n                <div className=\"ui fluid input\">\r\n                    <Field type={attributes.type} name={attributes.name} autoComplete={attributes.autoComplete }/>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const TextareaInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            { attributes.icon &&\r\n                <div className=\"ui fluid input left icon\">\r\n                    <Icon name={attributes.icon}/>\r\n                    <Field type={attributes.type} name={attributes.name} placeholder={attributes.placeholder} autoComplete={attributes.autoComplete } />\r\n                </div>\r\n            }\r\n\r\n            { !attributes.icon &&\r\n                <div className=\"ui fluid input\">\r\n                    <Field component=\"textarea\" name={attributes.name} autoComplete={attributes.autoComplete }/>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const RichEditorInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            <Editor\r\n                apiKey={process.env.TINYCLOUD_API_KEY}\r\n                value={attributes.value}\r\n                init={{\r\n                    height: 400,\r\n                    menubar: false,\r\n                    plugins: [\r\n                        'advlist', 'autolink', 'lists', 'link',\r\n                        'anchor', 'visualblocks', 'code',\r\n                        'insertdatetime', 'table'\r\n                    ],\r\n                    toolbar: 'blocks | ' +\r\n                        'bold italic forecolor | ' +\r\n                        'bullist numlist | ' +\r\n                        'removeformat',\r\n                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\r\n                    placeholder: attributes.placeholder\r\n                }}\r\n                onEditorChange={(content) => {\r\n                    attributes.setFieldValue(attributes.name, content);\r\n                }}\r\n            />\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const DropdownInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            <Form.Select search {...attributes} options={attributes.options}/>\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name} />\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const FileInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            <div className=\"field\" style={{margin: 0}}>\r\n                <div className=\"ui input\">\r\n                    <input type=\"file\" name={attributes.name} multiple={attributes.multiple} accept=\"image/*\" onChange={attributes.onChange}/>\r\n                </div>\r\n            </div>\r\n\r\n            <small>{attributes.info}</small>\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n\r\n        </Form.Field>\r\n    );\r\n};\r\n","import axios from \"axios\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Link } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { Button, Segment, Header, Divider, Image, Modal, Message, Icon } from \"semantic-ui-react\";\r\n\r\nimport { login } from \"../user.actions\";\r\nimport { loginSchema, forgotPasswordSchema } from \"../user.schema\";\r\nimport IdentityProviders from \"../../../core/client/components/IdentityProviders\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function Login() {\r\n    const dispatch = useDispatch();\r\n    const recaptchaRef = useRef();\r\n    const [emailSent, setEmailSent] = useState(false);\r\n    const [isPasswordResetModalActive, setIsPasswordResetModalActive] = useState(false);\r\n    const [forgotpasswordResponse, setForgotpasswordResponse] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"370px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Log-in to your account\r\n                    </div>\r\n                </Header>\r\n\r\n                <Segment className=\"stacked\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: \"\",\r\n                            password: \"\"\r\n                        }}\r\n                        validationSchema={loginSchema}\r\n                        onSubmit={(values, actions) => {\r\n                            recaptchaRef.current.executeAsync().then(recaptchaToken => {\r\n                                dispatch(login({\r\n                                    username: values.email,\r\n                                    password: values.password,\r\n                                    grant_type: \"password\",\r\n                                    recaptchaToken\r\n                                })).catch(function(err) {\r\n                                    iziToast[\"error\"]({\r\n                                        timeout: 3000,\r\n                                        title: err.response.status,\r\n                                        message: err.response.data,\r\n                                        position: \"topRight\"\r\n                                    });\r\n                                });\r\n                                recaptchaRef.current.reset();\r\n                                actions.setSubmitting(false);\r\n                            });\r\n                        }}\r\n                    >\r\n                        <Form className=\"ui form\">\r\n                            <TextInput attributes={{\r\n                                name: \"email\",\r\n                                type: \"email\",\r\n                                icon: \"mail\",\r\n                                placeholder: \"Email address\",\r\n                                autoComplete: \"username\"\r\n                            }}/>\r\n\r\n                            <TextInput attributes={{\r\n                                name: \"password\",\r\n                                type: \"password\",\r\n                                icon: \"lock\",\r\n                                placeholder: \"Password\",\r\n                                autoComplete: \"current-password\"\r\n                            }}/>\r\n\r\n                            <ReCAPTCHA\r\n                                size=\"invisible\"\r\n                                ref={recaptchaRef}\r\n                                sitekey={process.env.RECAPTCHA_SITE_KEY}\r\n                            />\r\n\r\n                            <Button fluid type=\"submit\" className=\"large teal\">Login</Button>\r\n                        </Form>\r\n                    </Formik>\r\n\r\n                    <button className=\"ui primary tertiary button\" onClick={() => setIsPasswordResetModalActive(true)}>Forgot password?</button>\r\n\r\n                    <Modal dimmer=\"blurring\" size=\"tiny\" open={isPasswordResetModalActive}>\r\n                        { emailSent &&\r\n                            <Message info icon>\r\n                                <Icon name=\"mail\"/>\r\n                                <Message.Content>\r\n                                    <Message.Header>Check your email</Message.Header>\r\n                                    We just sent an email to you with a link to reset your password!\r\n                                </Message.Content>\r\n                            </Message>\r\n                        }\r\n\r\n                        { forgotpasswordResponse &&\r\n                            <Message error icon>\r\n                                <Icon name=\"frown\"/>\r\n                                <Message.Content>\r\n                                    <Message.Header>Attention!</Message.Header>\r\n                                    {forgotpasswordResponse}\r\n                                </Message.Content>\r\n                            </Message>\r\n                        }\r\n\r\n                        <Formik\r\n                            initialValues={{\r\n                                email: \"\"\r\n                            }}\r\n                            validationSchema={forgotPasswordSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                axios.post(\"/api/forgot-password\", {...values}).then(() => {\r\n                                    setEmailSent(true);\r\n                                    setForgotpasswordResponse(\"\");\r\n                                }).catch(error => {\r\n                                    setForgotpasswordResponse(error.response.data);\r\n                                });\r\n\r\n                                actions.resetForm();\r\n                                actions.setSubmitting(false);\r\n                            }}\r\n                        >\r\n                            <>\r\n                                <Modal.Header>Reset Your Password</Modal.Header>\r\n                                <Modal.Content>\r\n                                    <Modal.Description>\r\n                                        <p>Enter your email address and we'll send you a link to reset your password.</p>\r\n                                        <Form id=\"passwordResetForm\">\r\n                                            <TextInput attributes={{\r\n                                                name: \"email\",\r\n                                                type: \"email\",\r\n                                                icon: \"mail\",\r\n                                                placeholder: \"E-mail address\",\r\n                                                autoComplete: \"username\"\r\n                                            }}/>\r\n                                        </Form>\r\n                                    </Modal.Description>\r\n                                </Modal.Content>\r\n                                <Modal.Actions>\r\n                                    <Button color=\"black\" onClick={() => {setIsPasswordResetModalActive(false); setEmailSent(false); setForgotpasswordResponse(\"\");}}>\r\n                                        Close\r\n                                    </Button>\r\n                                    <Button\r\n                                        loading={false}\r\n                                        form=\"passwordResetForm\"\r\n                                        type=\"submit\"\r\n                                        positive\r\n                                        icon=\"arrow right\"\r\n                                        labelPosition=\"right\"\r\n                                        content=\"Send e-mail\"\r\n                                    />\r\n                                </Modal.Actions>\r\n                            </>\r\n                        </Formik>\r\n                    </Modal>\r\n\r\n                    <Divider hidden/>\r\n                    Don't have an account? <Link to=\"/register\">Sign up</Link>.\r\n                </Segment>\r\n\r\n                This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n\r\n                <IdentityProviders/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./user.types\";\r\n\r\nexport function getSignedInUserProfile() {\r\n    return {\r\n        type: Types.GET_PROFILE,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/profile\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function login(formData) {\r\n    return {\r\n        type: Types.LOGIN,\r\n        payload: axios({\r\n            method: \"post\",\r\n            url: \"/api/login\",\r\n            data: formData\r\n        })\r\n    };\r\n}\r\n\r\nexport function register(formData) {\r\n    return {\r\n        type: Types.REGISTER,\r\n        payload: axios({\r\n            method: \"post\",\r\n            url: \"/api/register\",\r\n            data: formData\r\n        })\r\n    };\r\n}\r\n\r\nexport function changePassword(formData) {\r\n    return {\r\n        type: Types.CHANGE_PASSWORD,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: \"/api/profile/change-password\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function resetPassword(formData, query) {\r\n    return {\r\n        type: Types.RESET_PASSWORD,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/reset-password${query}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function removeOauthProvider(provider) {\r\n    return {\r\n        type: Types.DISCONNECT_PROVIDER,\r\n        payload: axios({\r\n            method: \"put\",\r\n            url: `/api/auth/disconnect?provider=${provider}`\r\n        })\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Link } from \"react-router\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, Segment, Header, Divider, Image } from \"semantic-ui-react\";\r\n\r\nimport { register } from \"../user.actions\";\r\nimport { registerSchema } from \"../user.schema\";\r\nimport IdentityProviders from \"../../../core/client/components/IdentityProviders\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function Register() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"380px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Sign up for a new account\r\n                    </div>\r\n                </Header>\r\n\r\n                <Segment className=\"stacked\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            name: \"\",\r\n                            email: \"\",\r\n                            password: \"\"\r\n                        }}\r\n                        displayName=\"Register\"\r\n                        validationSchema={registerSchema}\r\n                        onSubmit={(values, actions) => {\r\n                            dispatch(register(values));\r\n\r\n                            actions.resetForm();\r\n                            actions.setSubmitting(false);\r\n                        }}\r\n                    >\r\n                        {formikProps => (\r\n                            <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                                <TextInput attributes={{\r\n                                    type: \"text\",\r\n                                    name: \"name\",\r\n                                    placeholder: \"Name\",\r\n                                    icon: \"users\",\r\n                                    iconPosition: \"left\"\r\n                                }}/>\r\n                                <TextInput attributes={{\r\n                                    type: \"email\",\r\n                                    name: \"email\",\r\n                                    placeholder: \"E-mail address\",\r\n                                    icon: \"mail\",\r\n                                    iconPosition: \"left\",\r\n                                    autoComplete: \"username\"\r\n                                }}/>\r\n                                <TextInput attributes={{\r\n                                    type: \"password\",\r\n                                    name: \"password\",\r\n                                    placeholder: \"Password\",\r\n                                    icon: \"lock\",\r\n                                    iconPosition: \"left\",\r\n                                    autoComplete: \"new-password\"\r\n                                }}/>\r\n\r\n                                <Button fluid type=\"submit\" className=\"large teal\" disabled={formikProps.isSubmitting}>Register</Button>\r\n                                <Divider hidden/>\r\n                                Already have an account? <Link to=\"/login\">Sign in</Link>.\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                </Segment>\r\n\r\n                This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n\r\n                <IdentityProviders/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button, Segment, Header, Image, Message } from \"semantic-ui-react\";\r\n\r\nimport { resetPassword } from \"../user.actions\";\r\nimport { resetPasswordSchema } from \"../user.schema\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ResetPassword() {\r\n    const [isPasswordReset, setPasswordResetStatus] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"450px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Reset your password\r\n                    </div>\r\n                </Header>\r\n\r\n                { isPasswordReset &&\r\n                    <Message info>\r\n                        Your password is changed. Please <Link to=\"/login\">sign in</Link> to your account.\r\n                    </Message>\r\n                }\r\n\r\n                <Formik\r\n                    initialValues={{\r\n                        newPassword: \"\",\r\n                        confirmNewPassword: \"\"\r\n                    }}\r\n                    validationSchema={resetPasswordSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        dispatch(resetPassword(values, location.search)).then(() => {\r\n                            setPasswordResetStatus(true);\r\n                        });\r\n\r\n                        actions.resetForm();\r\n                        actions.setSubmitting(false);\r\n                    }}\r\n                >\r\n                    <Form className=\"ui form large\">\r\n                        <Segment className=\"stacked\">\r\n                            <TextInput attributes={{\r\n                                type: \"password\",\r\n                                name: \"newPassword\",\r\n                                label: \"New password\",\r\n                                autoComplete: \"new-password\"\r\n                            }}/>\r\n                            <TextInput attributes={{\r\n                                type: \"password\",\r\n                                name: \"confirmNewPassword\",\r\n                                label: \"Confirm new password\",\r\n                                autoComplete: \"new-password\"\r\n                            }}/>\r\n\r\n                            <Button fluid type=\"submit\" className=\"large teal\">Reset password</Button>\r\n                            <Divider hidden/>\r\n                            Remembered you password? <Link to=\"/login\">Sign in</Link>.\r\n                        </Segment>\r\n                    </Form>\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Divider } from \"semantic-ui-react\";\r\nimport { removeOauthProvider } from \"../user.actions\";\r\n\r\nexport default function ManageOauth() {\r\n    const dispatch = useDispatch();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    const onRemoveOauthProvider = provider => {\r\n        if(confirm(\"Are you sure?\")) {\r\n            dispatch(removeOauthProvider(provider));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Manage Oauth providers</h3>\r\n            <Divider section/>\r\n\r\n            <List divided relaxed>\r\n                <List.Item>\r\n                    <List.Icon name=\"facebook\" size=\"large\" verticalAlign=\"middle\" color=\"blue\"/>\r\n                    <List.Content>\r\n                        <List.Header>Facebook</List.Header>\r\n                        <List.Description>\r\n                            { !loggedInUser.facebook &&\r\n                                <a href=\"/oauth/facebook\">[Connect]</a>\r\n                            }\r\n                            { loggedInUser.facebook &&\r\n                                <div>\r\n                                    {loggedInUser.facebook.email} <a onClick={() => onRemoveOauthProvider(\"facebook\")}>[Disconnect]</a>\r\n                                </div>\r\n                            }\r\n                        </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"google\" size=\"large\" verticalAlign=\"middle\" color=\"red\"/>\r\n                    <List.Content>\r\n                        <List.Header>Google</List.Header>\r\n                    <List.Description>\r\n                        { !loggedInUser.google &&\r\n                            <a href=\"/oauth/google\">[Connect]</a>\r\n                        }\r\n                        { loggedInUser.google &&\r\n                            <div>\r\n                                {loggedInUser.google.email} <a onClick={() => onRemoveOauthProvider(\"google\")}>[Disconnect]</a>\r\n                            </div>\r\n                        }\r\n                    </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\n\r\nimport { changePasswordSchema } from \"../user.schema\";\r\nimport { changePassword } from \"../user.actions\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ChangePassword() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            <h3>Change local account password</h3>\r\n            <Divider section/>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    currentPassword: \"\",\r\n                    newPassword: \"\",\r\n                    confirmNewPassword: \"\"\r\n                }}\r\n                displayName=\"ChangePassword\"\r\n                validationSchema={changePasswordSchema}\r\n                onSubmit={(values, actions) => {\r\n                    dispatch(changePassword(values));\r\n\r\n                    actions.resetForm();\r\n                    actions.setSubmitting(false);\r\n                }}\r\n            >\r\n                {formikProps => (\r\n                    <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"currentPassword\",\r\n                            label: \"Current password\",\r\n                            autoComplete: \"current-password\"\r\n                        }}/>\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"newPassword\",\r\n                            label: \"New password\",\r\n                            autoComplete: \"new-password\"\r\n                        }}/>\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"confirmNewPassword\",\r\n                            label: \"Confirm new password\",\r\n                            autoComplete: \"new-password\"\r\n                        }}/>\r\n                        <Divider hidden/>\r\n                        <Button.Group>\r\n                            <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Change password</Button>\r\n                            <Button.Or/>\r\n                            <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                        </Button.Group>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Divider, Grid, Segment } from \"semantic-ui-react\";\r\nimport ManageOauth from \"./ManageOauth\";\r\nimport ChangePassword from \"./ChangePassword\";\r\n\r\nexport default function Profile() {\r\n    return (\r\n        <Segment>\r\n            <Grid columns={2} relaxed=\"very\" stackable>\r\n                <Grid.Column>\r\n                    <ChangePassword/>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                    <ManageOauth/>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n            <Divider vertical>Or</Divider>\r\n        </Segment>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./item.types\";\r\n\r\nexport function createItem(formData) {\r\n    return {\r\n        type: Types.POST_ITEM,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/items\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateItem(formData, id) {\r\n    return {\r\n        type: Types.PUT_ITEM,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getItem(id) {\r\n    return {\r\n        type: Types.GET_ITEM,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function deleteItem(id) {\r\n    return {\r\n        type: Types.DELETE_ITEM,\r\n        payload: axios({\r\n            method: \"delete\",\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getItems(query = \"\") {\r\n    return {\r\n        type: Types.GET_ITEMS,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items${query}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function setAsActiveImage(itemId, assetId) {\r\n    return {\r\n        type: Types.UPDATE_ITEM_IMAGE,\r\n        payload: axios({\r\n            method: \"put\",\r\n            url: `/api/items/${itemId}/images/${assetId}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function deleteImage(itemId, assetId) {\r\n    return {\r\n        type: Types.DELETE_ITEM_IMAGE,\r\n        payload: axios({\r\n            method: \"delete\",\r\n            url: `/api/items/${itemId}/images/${assetId}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function fetchItemsByYearRange(startYear, endYear) {\r\n    return {\r\n        type: Types.GET_ITEMS_BY_YEAR,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items/item-count?start_year=${startYear}&end_year=${endYear}`\r\n        })\r\n    };\r\n}\r\n","import { isEmpty } from \"lodash\";\r\nimport Highcharts from \"highcharts\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Select, Icon, Segment, Header } from \"semantic-ui-react\";\r\n\r\nimport { fetchItemsByYearRange } from \"../../../item/client/item.actions\";\r\n\r\nexport default function ItemChart() {\r\n    const options = [\r\n        { key: \"2021-2030\", value: \"2021-2030\", text: \"2021-2030\" },\r\n        { key: \"2011-2020\", value: \"2011-2020\", text: \"2011-2020\" },\r\n        { key: \"2001-2010\", value: \"2001-2010\", text: \"2001-2010\" }\r\n    ];\r\n\r\n    const [yearRange, setYearRange] = useState(`${new Date().getFullYear()}-${new Date().getFullYear() + 9}`);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let startYear, endYear;\r\n        [startYear, endYear] = yearRange.split(\"-\");\r\n\r\n        dispatch(fetchItemsByYearRange(startYear, endYear));\r\n    }, [dispatch, yearRange]);\r\n\r\n    const itemsPerYear = useSelector(state => state.itemReducer.itemsPerYear);\r\n\r\n    useEffect(() => {\r\n        let years = [];\r\n        let items = [];\r\n\r\n        for (const property in itemsPerYear) {\r\n            years.push(property.toString());\r\n            items.push(itemsPerYear[property]);\r\n        }\r\n\r\n        if(items.length && years.length) {\r\n            Highcharts.chart(\"item-chart\", {\r\n                chart: {\r\n                    type: \"column\"\r\n                },\r\n                title: {\r\n                    text: `Items purchased between year (${yearRange})`\r\n                },\r\n                xAxis: {\r\n                    categories: years,\r\n                    crosshair: true\r\n                },\r\n                yAxis: {\r\n                    min: 0,\r\n                    title: {\r\n                        text: \"Number of Items\"\r\n                    },\r\n                    allowDecimals: false\r\n                },\r\n                tooltip: {\r\n                    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                        '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\r\n                    footerFormat: '</table>',\r\n                    shared: true,\r\n                    useHTML: true\r\n                },\r\n                plotOptions: {\r\n                    column: {\r\n                        pointPadding: 0.2,\r\n                        borderWidth: 0\r\n                    }\r\n                },\r\n                series: [{\r\n                    name: \"Total Items\",\r\n                    data: items\r\n                }],\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                accessibility: {\r\n                    enabled: false\r\n                }\r\n            });\r\n        }\r\n    }, [itemsPerYear]);\r\n\r\n    return (\r\n        <>\r\n            <Select onChange={(event, data) => {setYearRange(data.value)}} options={options} defaultValue={options[0].value}/>\r\n\r\n            <div id=\"item-chart\"></div>\r\n\r\n            { isEmpty(itemsPerYear) &&\r\n                <Segment placeholder basic>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        Not enough data is available to generate the report.\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./category.types\";\r\n\r\nexport function getCategories() {\r\n    return {\r\n        type: Types.GET_CATEGORIES,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/categories\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function createCategory(formData) {\r\n    return {\r\n        type: Types.POST_CATEGORY,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/categories\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateCategory(formData, id) {\r\n    return {\r\n        type: Types.PUT_CATEGORY,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/categories/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getCategory(id) {\r\n    return {\r\n        type: Types.GET_CATEGORY,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/categories/${id}`\r\n        })\r\n    };\r\n}\r\n","import Highcharts from \"highcharts\";\r\nimport { Link } from \"react-router\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Icon, Segment, Header, Button } from \"semantic-ui-react\";\r\n\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\n\r\nexport default function CategoryChart() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories());\r\n    }, [dispatch]);\r\n\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    useEffect(() => {\r\n        if(categories.length) {\r\n            let data = [];\r\n\r\n            categories.forEach(o => {\r\n                if(o.items?.length) {\r\n                    data.push({\r\n                        name: o.name,\r\n                        y: o.items.length\r\n                    });\r\n                } else {\r\n                    data.push({\r\n                        name: o.name,\r\n                        y: 0\r\n                    });\r\n                }\r\n            });\r\n\r\n            Highcharts.chart(\"category-chart\", {\r\n                chart: {\r\n                    plotBackgroundColor: null,\r\n                    plotBorderWidth: null,\r\n                    plotShadow: false\r\n                },\r\n                title: {\r\n                    text: \"Gadget Categories\"\r\n                },\r\n                tooltip: {\r\n                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n                },\r\n                plotOptions: {\r\n                    pie: {\r\n                        allowPointSelect: true,\r\n                        cursor: \"pointer\",\r\n                        dataLabels: {\r\n                            enabled: true\r\n                        },\r\n                        showInLegend: true\r\n                    }\r\n                },\r\n                series: [{\r\n                    type: \"pie\",\r\n                    name: \"Categories\",\r\n                    colorByPoint: true,\r\n                    data\r\n                }],\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                accessibility: {\r\n                    enabled: false\r\n                }\r\n            });\r\n        }\r\n    }, [categories]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"category-chart\"></div>\r\n\r\n            { !categories.length &&\r\n                <Segment placeholder basic>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        Not enough data is available to generate this report.\r\n                    </Header>\r\n                    <Button primary>\r\n                        <Link to=\"/items/add\" style={{color: \"white\"}}>Add New Item</Link>\r\n                    </Button>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\n\r\nimport ItemChart from \"./ItemChart\";\r\nimport CategoryChart from \"./CategoryChart\";\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <div id=\"dashboard\">\r\n            <Card raised fluid>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <Icon name=\"pie chart\"/>\r\n                        Category percentages\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    <CategoryChart/>\r\n                </Card.Content>\r\n            </Card>\r\n\r\n            <Card raised fluid>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <Icon name=\"bar chart\"/>\r\n                        Yearly report on purchased items\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    <ItemChart/>\r\n                </Card.Content>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","import { string, object, number, date } from \"yup\";\r\n\r\nexport const itemSchema = object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(50, \"This field must be at most 50 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    categoryId: string()\r\n        .required(\"This field must not be empty.\"),\r\n    brandId: string()\r\n        .required(\"This field must not be empty.\"),\r\n    purchaseDate: date()\r\n        .required(\"This field must not be empty.\"),\r\n    currency: string()\r\n        .required(\"This field must not be empty.\"),\r\n    price: number()\r\n        .required(\"This field must not be empty.\"),\r\n    payee: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(30, \"This field must be at most 50 characters long.\")\r\n});\r\n","import axios from \"axios\";\r\nimport Types from \"./brand.types\";\r\n\r\nexport function getBrands() {\r\n    return {\r\n        type: Types.GET_BRANDS,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/brands\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function createBrand(formData) {\r\n    return {\r\n        type: Types.POST_BRAND,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/brands\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateBrand(formData, id) {\r\n    return {\r\n        type: Types.PUT_BRAND,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/brands/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getBrand(id) {\r\n    return {\r\n        type: Types.GET_BRAND,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/brands/${id}`\r\n        })\r\n    };\r\n}\r\n","import { Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\nimport { Divider, Button, Form as SemanticUIForm } from \"semantic-ui-react\";\r\nimport Dropzone from 'react-dropzone';\r\n\r\nimport Types from \"../item.types\";\r\nimport { itemSchema } from \"../item.schema\";\r\nimport { getBrands } from \"../../../brand/client/brand.actions\";\r\nimport { createItem, updateItem, getItem } from \"../item.actions\";\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\nimport { TextInput, RichEditorInput, DropdownInput, FileInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ItemForm() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n        dispatch(getCategories());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(id) dispatch(getItem(id));\r\n    }, [id, dispatch]);\r\n\r\n    const item = useSelector(state => state.itemReducer.item);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    const categoryOptions = categories.map(function(option) {\r\n        return { key: option._id, value: option._id, text: option.name };\r\n    });\r\n\r\n    const brandOptions = brands.map(function(option) {\r\n        return { key: option._id, value: option._id, text: option.name };\r\n    });\r\n\r\n    const currencyOptions = [\r\n        { key: \"AUD\", text: \"AUD\", value: \"AUD\" },\r\n        { key: \"BDT\", text: \"BDT\", value: \"BDT\" },\r\n        { key: \"BGN\", text: \"BGN\", value: \"BGN\" },\r\n        { key: \"CAD\", text: \"CAD\", value: \"CAD\" },\r\n        { key: \"CNY\", text: \"CNY\", value: \"CNY\" },\r\n        { key: \"EUR\", text: \"EUR\", value: \"EUR\" },\r\n        { key: \"GBP\", text: \"GBP\", value: \"GBP\" },\r\n        { key: \"INR\", text: \"INR\", value: \"INR\" },\r\n        { key: \"JPY\", text: \"JPY\", value: \"JPY\" },\r\n        { key: \"NZD\", text: \"NZD\", value: \"NZD\" },\r\n        { key: \"RUB\", text: \"RUB\", value: \"RUB\" },\r\n        { key: \"SGD\", text: \"SGD\", value: \"SGD\" },\r\n        { key: \"USD\", text: \"USD\", value: \"USD\" }\r\n    ];\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\",\r\n                description: item ? item.description : \"\",\r\n                categoryId: item ? item.categoryId : \"\",\r\n                brandId: item ? item.brandId : \"\",\r\n                purchaseDate: item?.purchaseDate ? format(parseISO(item.purchaseDate), \"y-MM-d\") : \"\",\r\n                price: item ? item.price : \"\",\r\n                currency: item ? item.currency : \"\",\r\n                payee: item ? item.payee : \"\",\r\n                invoice: \"\",\r\n                images: []\r\n            }}\r\n            displayName=\"ItemForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={itemSchema}\r\n            onSubmit={(values, actions) => {\r\n                let formData = new FormData();\r\n\r\n                if(values.images) {\r\n                    for(let index = 0; index < values.images.length; index++) {\r\n                        formData.append(\"images\", values.images[index]);\r\n                    }\r\n                    delete values.images;\r\n                }\r\n\r\n                if(values.invoice) {\r\n                    formData.append(\"invoice\", values.invoice);\r\n                    delete values.invoice;\r\n                }\r\n\r\n                for(const key in values) {\r\n                    if(values[key] && values.hasOwnProperty(key)) {\r\n                        formData.append(key, values[key]);\r\n                    }\r\n                }\r\n\r\n                if(id) {\r\n                    dispatch(updateItem(formData, id)).then(result => {\r\n                        const { type } = result.action;\r\n\r\n                        if(type === Types.PUT_ITEM_FULFILLED) {\r\n                            window.location.reload();\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch(createItem(formData)).then(result => {\r\n                        const { type, payload } = result.action;\r\n\r\n                        if(type === Types.POST_ITEM_FULFILLED) {\r\n                            navigate(`/items/${payload.data._id}`);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\" encType=\"multipart/form-data\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <RichEditorInput attributes={{\r\n                        value: formikProps.values.description,\r\n                        name: \"description\",\r\n                        label: \"Description\",\r\n                        placeholder: \"Item description goes here...\",\r\n                        setFieldValue: formikProps.setFieldValue\r\n                    }}/>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.categoryId,\r\n                            name: \"categoryId\",\r\n                            placeholder: \"Select category\",\r\n                            label: \"Category\",\r\n                            options: categoryOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.brandId,\r\n                            name: \"brandId\",\r\n                            placeholder: \"Select brand\",\r\n                            label: \"Brand\",\r\n                            options: brandOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <TextInput attributes={{\r\n                            type: \"number\",\r\n                            name: \"price\",\r\n                            label: \"Price\",\r\n                            required: true\r\n                        }}/>\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.currency,\r\n                            name: \"currency\",\r\n                            placeholder: \"Select currency\",\r\n                            label: \"Currency\",\r\n                            options: currencyOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <TextInput attributes={{\r\n                            type: \"date\",\r\n                            name: \"purchaseDate\",\r\n                            label: \"Purchase date\",\r\n                            required: true\r\n                        }}/>\r\n\r\n                        <TextInput attributes={{\r\n                            type: \"text\",\r\n                            name: \"payee\",\r\n                            label: \"Payee\"\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <FileInput attributes={{\r\n                        type: \"file\",\r\n                        name: \"images\",\r\n                        label: \"Upload images\",\r\n                        multiple: true,\r\n                        info: \"You can upload a maximum of 3 images at a time. The max file size limit is 1.5 MB.\",\r\n                        onChange: event => {formikProps.setFieldValue(\"images\", event.currentTarget.files)}\r\n                    }}/>\r\n\r\n                    {/* <Dropzone\r\n                        multiple\r\n                        onDrop={acceptedFiles => {\r\n                            if (acceptedFiles.length === 0) return;\r\n                            formikProps.setFieldValue(\"images\", formikProps.values.images.concat(acceptedFiles));\r\n                        }}\r\n                    >\r\n                        {({getRootProps, getInputProps}) => (\r\n                            <section>\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <p>Drag 'n' drop some files here, or click to select files</p>\r\n                                </div>\r\n                            </section>\r\n                        )}\r\n                    </Dropzone> */}\r\n\r\n                    <FileInput attributes={{\r\n                        type: \"file\",\r\n                        name: \"invoice\",\r\n                        label: \"Upload invoice\",\r\n                        info: \"The max file size limit is 1.5 MB.\",\r\n                        onChange: event => {formikProps.setFieldValue(\"invoice\", event.currentTarget.files[0])}\r\n                    }}/>\r\n\r\n                    <Divider hidden/>\r\n\r\n                    <Button.Group>\r\n                        <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                        <Button.Or/>\r\n                        <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                    </Button.Group>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FormattedDate, FormattedNumber } from \"react-intl\";\r\nimport { Link, useParams, useNavigate } from \"react-router\";\r\nimport { Label, Message, Icon, Divider, Grid, Image, Item, Button, Header, Card, Breadcrumb, Modal, TransitionablePortal } from \"semantic-ui-react\";\r\n\r\nimport Types from \"../item.types\";\r\nimport ItemForm from \"./item-form.component\";\r\nimport { getItem, deleteItem, setAsActiveImage, deleteImage } from \"../item.actions\";\r\n\r\nexport default function ItemDetails() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const item = useSelector(state => state.itemReducer.item);\r\n    const user = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    const [itemFormVisibleState, setItemFormVisibleState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getItem(id));\r\n    }, [dispatch]);\r\n\r\n    const onDeleteItem = id => {\r\n        if(confirm(\"Are you sure? All assets associated with this item will be removed too.\")) {\r\n            dispatch(deleteItem(id)).then(function(result) {\r\n                const { type } = result.action;\r\n\r\n                if(type === Types.DELETE_ITEM_FULFILLED) {\r\n                    navigate(\"/items\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const onDeleteImage = (itemId, fileId) => {\r\n        if(confirm(\"Are you sure you want to delete this asset?\")) {\r\n            dispatch(deleteImage(itemId, fileId));\r\n        }\r\n    };\r\n\r\n    if(!item) {\r\n        return (\r\n            <Message icon warning>\r\n                <Icon name=\"warning sign\" size=\"large\"/>\r\n                <Message.Content>\r\n                    <Message.Header>Warning!</Message.Header>\r\n                    Item not found.\r\n                </Message.Content>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    if(item.assets?.length) {\r\n        item.activeImage = item.assets.find(x => x.active === true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb size=\"small\">\r\n                <Link to=\"/items\">\r\n                    <Breadcrumb.Section>Items</Breadcrumb.Section>\r\n                </Link>\r\n                <Breadcrumb.Divider icon=\"right arrow\"/>\r\n                <Link to={`/items?categoryId=${item.category._id}`}>\r\n                    <Breadcrumb.Section>{item.category.name}</Breadcrumb.Section>\r\n                </Link>\r\n                <Breadcrumb.Divider icon=\"right arrow\"/>\r\n                <Breadcrumb.Section active>{item.name}</Breadcrumb.Section>\r\n            </Breadcrumb>\r\n\r\n            <Divider hidden/>\r\n\r\n            <Grid>\r\n                <Grid.Column width={10}>\r\n                    { item.activeImage &&\r\n                        <Image src={item.activeImage.secure_url} alt={item.name}/>\r\n                    }\r\n\r\n                    { item.files && item.files.length === 0 &&\r\n                        <Message warning icon>\r\n                        <Icon name=\"warning sign\" size=\"large\"/>\r\n                            <Message.Content>\r\n                                <Message.Header>Warning!</Message.Header>\r\n                                No assets are found for this item. <Link to={`/items/${item._id}/edit`}>Consider editing the item</Link>.\r\n                            </Message.Content>\r\n                        </Message>\r\n                    }\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={6}>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Header as=\"h3\">{item.name}</Header>\r\n                            <Divider hidden/>\r\n\r\n                            <Divider horizontal>Meta Informations</Divider>\r\n\r\n                            <Item.Meta>\r\n                                <div>Category: <Link to={`/items?categoryId=${item.category._id}`}>{item.category.name}</Link></div>\r\n                                <div>Brand: <Link to={`/items?brandId=${item.brand._id}`}>{item.brand.name}</Link></div>\r\n                                { item.price &&\r\n                                    <div>Price: <FormattedNumber value={item.price} style=\"currency\" currency={item.currency}/></div>\r\n                                }\r\n                                <div>Purchase Date: <FormattedDate value={item.purchaseDate} day=\"2-digit\" month=\"long\" year=\"numeric\"/></div>\r\n                                { item.invoice &&\r\n                                    <a href={`https://res.cloudinary.com/shibbir/image/upload/fl_attachment:invoice-${item._id}/${item.invoice.public_id}`}>Download invoice</a>\r\n                                }\r\n                            </Item.Meta>\r\n\r\n                            <Divider horizontal>Specifications</Divider>\r\n\r\n                            <Item.Description>\r\n                                { item.description &&\r\n                                    <div dangerouslySetInnerHTML={{ __html: item.description }}></div>\r\n                                }\r\n                                { !item.description &&\r\n                                    <div>Not available at the moment.</div>\r\n                                }\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    { user && !user.isAdmin &&\r\n                        <>\r\n                            <Divider section/>\r\n\r\n                            <Button color=\"blue\" onClick={() => setItemFormVisibleState(true)}>\r\n                                <Icon name=\"pencil\"/> Edit\r\n                            </Button>\r\n\r\n                            <Button color=\"red\" onClick={() => onDeleteItem(id)}>\r\n                                <Icon name=\"trash\"/> Delete\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n            { item.assets && item.assets.length > 0 &&\r\n                <div>\r\n                    <Divider hidden/>\r\n                    <h2>Manage assets</h2>\r\n                    <Divider section/>\r\n\r\n                    <Card.Group>\r\n                        { item.assets.map((asset) => {\r\n                            return (\r\n                                <Card key={asset._id} raised>\r\n                                    { asset.active &&\r\n                                        <Label color=\"teal\" corner=\"right\" size=\"small\">\r\n                                            <Icon name=\"pin\"/>\r\n                                        </Label>\r\n                                    }\r\n\r\n                                    <Card.Content className=\"ui center aligned\">\r\n                                        <Image src={asset.secure_url} size=\"small\"/>\r\n                                    </Card.Content>\r\n\r\n                                    { user && !user.isAdmin &&\r\n                                        <Card.Content extra>\r\n                                            <a onClick={() => dispatch(setAsActiveImage(item._id, asset._id))} disabled={asset.active}>\r\n                                                <Icon color=\"teal\" name=\"checkmark\"/>\r\n                                                Set as active\r\n                                            </a>\r\n\r\n                                            <div className=\"right floated\">\r\n                                                <a onClick={() => onDeleteImage(item._id, asset._id)}>\r\n                                                    <Icon color=\"red\" name=\"delete\"/>\r\n                                                    Discard\r\n                                                </a>\r\n                                            </div>\r\n                                        </Card.Content>\r\n                                    }\r\n                                </Card>\r\n                            );\r\n                        })}\r\n                    </Card.Group>\r\n                </div>\r\n            }\r\n\r\n            <TransitionablePortal open={itemFormVisibleState} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Item Form</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <ItemForm id={id}/>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setItemFormVisibleState(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n        </>\r\n    );\r\n}\r\n","import queryString from \"query-string\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useLocation, useNavigate } from \"react-router\";\r\nimport { getItems } from \"../item.actions\";\r\nimport ItemForm from \"./item-form.component\";\r\nimport { getBrands } from \"../../../brand/client/brand.actions\";\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\nimport { Label, Form, Button, Card, Divider, Icon, Menu, Container, Image, Segment, Header, Modal, TransitionablePortal, Grid } from \"semantic-ui-react\";\r\n\r\nexport default function Items() {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const [filterModal, setFilterModal] = useState(false);\r\n    const [itemFormVisibleState, setItemFormVisibleState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n        dispatch(getCategories());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(getItems(location.search));\r\n    }, [location.search]);\r\n\r\n    const params = queryString.parse(location.search);\r\n\r\n    const [brandId, setBrandId] = useState(params.brandId ? params.brandId : \"\");\r\n    const [categoryId, setCategoryId] = useState(params.categoryId ? params.categoryId : \"\");\r\n    const [startDate, setStartDate] = useState(params.startDate ? params.startDate : \"\");\r\n    const [endDate, setEndDate] = useState(params.endDate ? params.endDate : \"\");\r\n\r\n    function filter(e, discard) {\r\n        const q = {};\r\n\r\n        if(categoryId && discard !== \"category\") {\r\n            q.categoryId = categoryId;\r\n        }\r\n\r\n        if(brandId && discard !== \"brand\") {\r\n            q.brandId = brandId;\r\n        }\r\n\r\n        if(startDate && endDate && discard !== \"date\") {\r\n            q.startDate = startDate;\r\n            q.endDate = endDate;\r\n        }\r\n\r\n        if(location.search === `?${queryString.stringify(q)}`) return;\r\n\r\n        navigate({\r\n            pathname: \"/items\",\r\n            search: queryString.stringify(q)\r\n        });\r\n\r\n        setFilterModal(false);\r\n    }\r\n\r\n    function resetFilter() {\r\n        setBrandId(\"\");\r\n        setCategoryId(\"\");\r\n        setStartDate(\"\");\r\n        setEndDate(\"\");\r\n\r\n        if(params.categoryId || params.brandId || params.startDate || params.endDate) {\r\n            navigate(\"items\");\r\n        }\r\n    }\r\n\r\n    let brandName = null;\r\n    let categoryName = null;\r\n    let dateRange = null;\r\n\r\n    const { data, metadata } = useSelector(state => state.itemReducer.items);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n\r\n    if(params.categoryId && categories.length) {\r\n        categoryName = categories.find(x => x._id === params.categoryId).name;\r\n    }\r\n\r\n    if(params.brandId && brands.length) {\r\n        brandName = brands.find(x => x._id === params.brandId).name;\r\n    }\r\n\r\n    if(params.startDate && params.endDate) {\r\n        dateRange = `${startDate}-${endDate}`;\r\n    }\r\n\r\n    const categoryOptions = categories.map(option => ({ key: option._id, value: option._id, text: option.name }));\r\n\r\n    const brandOptions = brands.map((option) => ({ key: option._id, value: option._id, text: option.name }));\r\n\r\n    const cards = data.map(function(item) {\r\n        const activeImage = item.assets.find(x => x.active) ? item.assets.find(x => x.active).secure_url : item.assets[0]?.secure_url;\r\n\r\n        return (\r\n            <Link key={item._id} className=\"ui raised card\" to={item._id}>\r\n                <Card.Content header={item.name} className=\"ui center aligned\"/>\r\n                <Card.Content className=\"ui center aligned image-wrapper\">\r\n                    { activeImage\r\n                        ? <Image src={activeImage} alt={item.name}/>\r\n                        : \"Image not available!\"\r\n                    }\r\n                </Card.Content>\r\n            </Link>\r\n        );\r\n    });\r\n\r\n    let paginationLinks = [];\r\n\r\n    for(let idx = 1; idx <= metadata.pageCount; idx++) {\r\n        paginationLinks.push({\r\n            idx,\r\n            link: {\r\n                pathname: location.pathname,\r\n                search: queryString.stringify({ ...params, page: idx })\r\n            },\r\n            isActive: !params.page && idx === 1 || +params.page === idx\r\n        });\r\n    }\r\n\r\n    paginationLinks = paginationLinks.map(function(page) {\r\n        return (\r\n            <Menu.Item active={page.isActive} key={page.idx}>\r\n                <Link to={page.link}>{page.idx}</Link>\r\n            </Menu.Item>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Segment raised stacked>\r\n                <Grid columns={2}>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Header as=\"h3\">\r\n                                <Icon name=\"archive\" circular/>\r\n                                <Header.Content>\r\n                                    Total Gadgets: {metadata.totalCount}\r\n                                    <Header.Subheader>Add, edit, sort and filter your gadgets <Icon name=\"angle double right\"></Icon></Header.Subheader>\r\n                                </Header.Content>\r\n                            </Header>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column>\r\n                            <Button floated=\"right\" size=\"small\" color=\"blue\" onClick={() => setItemFormVisibleState(true)}>\r\n                                Add new item\r\n                            </Button>\r\n                            <Button floated=\"right\" size=\"small\" onClick={() => setFilterModal(true)}>\r\n                                <Icon color=\"teal\" name=\"filter\"/> Filter\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n\r\n            <TransitionablePortal open={filterModal} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Filter</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <Form onSubmit={filter}>\r\n                                <Form.Group widths=\"equal\">\r\n                                    <Form.Field>\r\n                                        <label>Category</label>\r\n                                        <Form.Select\r\n                                            placeholder=\"Choose an option\"\r\n                                            name=\"categoryId\"\r\n                                            options={categoryOptions}\r\n                                            value={categoryId}\r\n                                            onChange={(event, data) => {setCategoryId(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n\r\n                                    <Form.Field>\r\n                                        <label>Brand</label>\r\n                                        <Form.Select\r\n                                            placeholder=\"Choose an option\"\r\n                                            name=\"brandId\"\r\n                                            options={brandOptions}\r\n                                            value={brandId}\r\n                                            onChange={(event, data) => {setBrandId(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group widths=\"equal\">\r\n                                    <Form.Field>\r\n                                        <label>Start Date</label>\r\n                                        <Form.Input\r\n                                            type=\"date\"\r\n                                            placeholder=\"Choose a date\"\r\n                                            name=\"startDate\"\r\n                                            value={startDate}\r\n                                            onChange={(event, data) => {setStartDate(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n\r\n                                    <Form.Field>\r\n                                        <label>End Date</label>\r\n                                        <Form.Input\r\n                                            type=\"date\"\r\n                                            placeholder=\"Choose a date\"\r\n                                            name=\"endDate\"\r\n                                            value={endDate}\r\n                                            onChange={(event, data) => {setEndDate(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n\r\n                                <Button.Group>\r\n                                    <Button type=\"submit\" positive>\r\n                                        <Icon name=\"filter\"/> Apply\r\n                                    </Button>\r\n                                    <Button.Or />\r\n                                    <Button type=\"button\" onClick={resetFilter}>\r\n                                        <Icon name=\"undo\"/> Reset\r\n                                    </Button>\r\n                                </Button.Group>\r\n                            </Form>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setFilterModal(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n\r\n            { categoryName &&\r\n                <Label color=\"blue\">\r\n                    Category: {categoryName} <Icon name=\"delete\" onClick={(e) => { setCategoryId(\"\"); filter(e, \"category\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            { brandName &&\r\n                <Label color=\"blue\">\r\n                    Brand: {brandName} <Icon name=\"delete\" onClick={(e) => { setBrandId(\"\"); filter(e, \"brand\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            { dateRange &&\r\n                <Label color=\"blue\">\r\n                    Date Range: {dateRange} <Icon name=\"delete\" onClick={(e) => { setStartDate(\"\"); setEndDate(\"\"); filter(e, \"date\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            <Divider hidden/>\r\n\r\n            { cards.length > 0 &&\r\n                <div id=\"item-cards-container\">\r\n                    <Card.Group itemsPerRow={5} stackable>\r\n                        {cards}\r\n                    </Card.Group>\r\n\r\n                    { metadata.pageCount !== 1 &&\r\n                        <div>\r\n                            <Divider hidden/>\r\n                            <Container textAlign=\"center\">\r\n                                <Menu pagination>\r\n                                    {paginationLinks}\r\n                                </Menu>\r\n                            </Container>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n\r\n            { cards.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\" />\r\n                        You don't have any items!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n\r\n            <TransitionablePortal open={itemFormVisibleState} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Item Form</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <ItemForm/>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setItemFormVisibleState(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n        </>\r\n    );\r\n}\r\n","import { string, object } from \"yup\";\r\n\r\nexport default object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(30, \"This field must be at most 30 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport BrandSchema from \"./brand.schema\";\r\nimport { createBrand, updateBrand, getBrand } from \"./brand.actions\";\r\nimport { TextInput } from \"../../core/client/components/FieldInputs\";\r\n\r\nfunction BrandForm({id} = props) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            dispatch(getBrand(id));\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const brand = useSelector(state => state.brandReducer.brand);\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: id && brand ? brand.name : \"\"\r\n            }}\r\n            displayName=\"BrandForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={BrandSchema}\r\n            onSubmit={(values, actions) => {\r\n                if(id) {\r\n                    dispatch(updateBrand(values, id)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                    });\r\n                } else {\r\n                    dispatch(createBrand(values)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                        actions.resetForm();\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <Divider hidden/>\r\n                    <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                    <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nBrandForm.propTypes = {\r\n    id: PropTypes.string\r\n};\r\n\r\nexport default BrandForm;\r\n","import { Link } from \"react-router\";\r\nimport { FormattedDate } from \"react-intl\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Table, Segment, Icon, Header, Button, Modal, TransitionablePortal, Divider } from \"semantic-ui-react\";\r\nimport { getBrands } from \"./brand.actions\";\r\nimport BrandForm from \"./brand-form.component\";\r\n\r\nexport default function Brands() {\r\n    const dispatch = useDispatch();\r\n    const [brandId, setBrandId] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n    }, []);\r\n\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n\r\n    const rows = brands.map(function(brand, index) {\r\n        return (\r\n            <Table.Row key={brand._id}>\r\n                <Table.Cell>{index+1}</Table.Cell>\r\n                <Table.Cell>{brand.name}</Table.Cell>\r\n                <Table.Cell><FormattedDate value={brand.date} day=\"2-digit\" month=\"long\" year=\"numeric\"/></Table.Cell>\r\n                <Table.Cell>\r\n                    <Link to={`/items?brandId=${brand._id}`}>\r\n                        <Icon color='teal' name=\"external alternate\"/>\r\n                        {brand.items ? brand.items.length : 0} item(s)\r\n                    </Link>\r\n                </Table.Cell>\r\n                <Table.Cell>\r\n                    { loggedInUser?._id === brand.createdBy &&\r\n                        <a onClick={() => setBrandId(brand._id)}>\r\n                            <Icon name=\"edit\" color=\"teal\"/>\r\n                        </a>\r\n                    }\r\n\r\n                    { loggedInUser?._id !== brand.createdBy &&\r\n                        <Icon name=\"lock\" color=\"black\"/>\r\n                    }\r\n                </Table.Cell>\r\n            </Table.Row>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            { brands.length > 0 &&\r\n                <>\r\n                    <Button floated=\"right\" primary size=\"small\" onClick={() => setBrandId(null)}>\r\n                        Add new brand\r\n                    </Button>\r\n\r\n                    <Divider hidden clearing/>\r\n\r\n                    <Table selectable compact>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>#</Table.HeaderCell>\r\n                                <Table.HeaderCell>Name</Table.HeaderCell>\r\n                                <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n                                <Table.HeaderCell>Items</Table.HeaderCell>\r\n                                <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n\r\n                        <Table.Body>\r\n                            {rows}\r\n                        </Table.Body>\r\n                    </Table>\r\n\r\n                    <TransitionablePortal open={brandId !== undefined} transition={{ animation: \"scale\", duration: 400 }}>\r\n                        <Modal dimmer size=\"tiny\" open={true}>\r\n                            <Modal.Header>Brand Form</Modal.Header>\r\n                            <Modal.Content>\r\n                                <Modal.Description>\r\n                                    <BrandForm id={brandId}/>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color=\"black\" onClick={() => setBrandId(undefined)}>\r\n                                    Close\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </TransitionablePortal>\r\n                </>\r\n            }\r\n\r\n            { brands.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        No brands are available!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import { string, object } from \"yup\";\r\n\r\nexport default object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(20, \"This field must be at most 20 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import { Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport CategorySchema from \"../category.schema\";\r\nimport { createCategory, updateCategory, getCategory } from \"../category.actions\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function CategoryForm({id} = props) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            dispatch(getCategory(id));\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const category = useSelector(state => state.categoryReducer.category);\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: id && category ? category.name : \"\",\r\n                group: id && category ? category.group : \"\"\r\n            }}\r\n            displayName=\"CategoryForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={CategorySchema}\r\n            onSubmit={(values, actions) => {\r\n                if(id) {\r\n                    dispatch(updateCategory(values, id)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                    });\r\n                } else {\r\n                    dispatch(createCategory(values)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                        actions.resetForm();\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <Divider hidden/>\r\n                    <Button.Group>\r\n                        <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                        <Button.Or/>\r\n                        <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                    </Button.Group>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n","import { Link } from \"react-router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Icon, Divider, Segment, Button, Modal, Header, TransitionablePortal, Card } from \"semantic-ui-react\";\r\n\r\nimport CategoryForm from \"./category-form.component\";\r\nimport { getCategories } from \"../category.actions\";\r\n\r\nexport default function Categories() {\r\n    const dispatch = useDispatch();\r\n    const [categoryId, setCategoryId] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories());\r\n    }, []);\r\n\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    const cards = categories.map(function(category) {\r\n        return (\r\n            <Card key={category._id}>\r\n                <Card.Content>\r\n                    <Card.Header>{category.name}</Card.Header>\r\n                    <Card.Meta>{category.items ? category.items.length : 0} Items</Card.Meta>\r\n                    <Card.Description>\r\n                        Steve wants to add you to the group <strong>best friends</strong>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Link to={`/items?categoryId=${category._id}`} className=\"ui button basic blue\">\r\n                        <Icon name=\"external alternate\" color=\"teal\"/> Show Items\r\n                    </Link>\r\n                    { loggedInUser?.isAdmin &&\r\n                        <a onClick={() => setCategoryId(category._id)} className=\"ui button\">\r\n                            <Icon name=\"pencil\" color=\"teal\"/> Edit\r\n                        </a>\r\n                    }\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            { categories.length > 0 &&\r\n                <>\r\n                    { loggedInUser?.isAdmin &&\r\n                        <Button floated=\"right\" primary size=\"small\" onClick={() => setCategoryId(null)}>\r\n                            Add new category\r\n                        </Button>\r\n                    }\r\n\r\n                    <Divider hidden clearing/>\r\n\r\n                    <Card.Group itemsPerRow={4} stackable>\r\n                        {cards}\r\n                    </Card.Group>\r\n\r\n                    <TransitionablePortal open={categoryId !== undefined} transition={{ animation: \"scale\", duration: 400 }}>\r\n                        <Modal dimmer size=\"tiny\" open={true}>\r\n                            <Modal.Header>Category Form</Modal.Header>\r\n                            <Modal.Content>\r\n                                <Modal.Description>\r\n                                    <CategoryForm id={categoryId}/>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color=\"black\" onClick={() => setCategoryId(undefined)}>\r\n                                    Close\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </TransitionablePortal>\r\n                </>\r\n            }\r\n\r\n            { categories.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        No categories are available!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router\";\r\n\r\nimport \"fomantic-ui-css/semantic.css\";\r\nimport \"izitoast/dist/css/iziToast.css\";\r\nimport \"./app.component.css\";\r\n\r\nimport NoMatch from \"./NoMatch\";\r\nimport PublicLayoutRoute from \"./PublicLayoutRoute\";\r\nimport PrivateLayoutRoute from \"./PrivateLayoutRoute\";\r\nimport Login from \"../../user/client/components/login.component\";\r\nimport Register from \"../../user/client/components/register.component\";\r\nimport ResetPassword from \"../../user/client/components/ResetPassword\";\r\nimport Profile from \"../../user/client/components/profile.component\";\r\nimport Dashboard from \"../../user/client/components/dashboard.component\";\r\nimport { getSignedInUserProfile } from \"../../user/client/user.actions\";\r\n\r\nimport Item from \"../../item/client/components/item.component\";\r\nimport Items from \"../../item/client/components/items.component\";\r\nimport Brands from \"../../brand/client/brands.component\";\r\nimport Categories from \"../../category/client/components/categories.component\";\r\n\r\nlet refCount = 0;\r\n\r\nfunction setLoading(isLoading) {\r\n    if (isLoading) {\r\n        refCount++;\r\n        document.getElementById(\"loader\").style = \"display: block\";\r\n    } else if (refCount > 0) {\r\n        refCount--;\r\n        if(refCount > 0) document.getElementById(\"loader\").style = \"display: block\";\r\n        else document.getElementById(\"loader\").style = \"display: none\";\r\n    }\r\n}\r\n\r\naxios.interceptors.request.use(config => {\r\n    setLoading(true);\r\n    return config;\r\n}, error => {\r\n    setLoading(false);\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.response.use(response => {\r\n    setLoading(false);\r\n    return response;\r\n}, error => {\r\n    setLoading(false);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default function App() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getSignedInUserProfile());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Routes>\r\n            <Route element={<PublicLayoutRoute/>}>\r\n                <Route path=\"login\" element={<Login/>}/>\r\n                <Route path=\"register\" element={<Register/>}/>\r\n                <Route path=\"reset-password\" element={<ResetPassword/>}/>\r\n            </Route>\r\n\r\n            <Route element={<PrivateLayoutRoute/>}>\r\n                <Route path=\"/\" element={<Dashboard/>}/>\r\n                <Route path=\"profile\" element={<Profile/>}/>\r\n                <Route path=\"items\" element={<Items/>}/>\r\n                <Route path=\"items/:id\" element={<Item/>}/>\r\n                <Route path=\"brands\" element={<Brands/>}/>\r\n                <Route path=\"categories\" element={<Categories/>}/>\r\n            </Route>\r\n\r\n            <Route path=\"*\" element={<NoMatch/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router\";\r\n\r\nimport store from \"./store\";\r\nimport App from \"./app.component\";\r\n\r\nconst root = createRoot(document.getElementById(\"app\"));\r\n\r\nroot.render(\r\n    <Provider store={store}>\r\n        <IntlProvider locale=\"en\">\r\n            <BrowserRouter future={{ v7_startTransition: true }}>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </IntlProvider>\r\n    </Provider>\r\n);\r\n"],"names":["initialState","loggedInUser","item","itemsPerYear","items","data","metadata","pages","brands","brand","categories","category","combineReducers","userReducer","state","arguments","length","undefined","action","type","Types","_objectSpread","payload","itemReducer","files","brandReducer","concat","map","x","_id","name","categoryReducer","configureStore","reducer","reducers","middleware","getDefaultMiddleware","serializableCheck","promise","NoMatch","React","Container","Divider","hidden","Segment","placeholder","Header","icon","Icon","color","Inline","Button","primary","href","PublicLayoutRoute","_location$state","location","useLocation","useSelector","Navigate","to","from","pathname","replace","Outlet","Navbar","Menu","stackable","borderless","Item","header","style","paddingLeft","src","NavLink","className","_ref","isActive","_ref2","_ref3","_ref4","paddingRight","marginLeft","Footer","rel","PrivateLayoutRoute","loginSchema","object","shape","email","string","required","password","registerSchema","min","max","changePasswordSchema","currentPassword","newPassword","confirmNewPassword","oneOf","ref","resetPasswordSchema","forgotPasswordSchema","IdentityProviders","horizontal","TextInput","attributes","Form","Field","label","autoComplete","ErrorMessage","RichEditorInput","Editor","apiKey","process","value","init","height","menubar","plugins","toolbar","content_style","onEditorChange","content","setFieldValue","DropdownInput","Select","_extends","search","options","FileInput","_ref5","margin","multiple","accept","onChange","info","Login","dispatch","useDispatch","recaptchaRef","useRef","_useState","useState","_useState2","_slicedToArray","emailSent","setEmailSent","_useState3","_useState4","isPasswordResetModalActive","setIsPasswordResetModalActive","_useState5","_useState6","forgotpasswordResponse","setForgotpasswordResponse","maxWidth","as","Image","Formik","initialValues","validationSchema","onSubmit","values","actions","current","executeAsync","then","recaptchaToken","formData","username","grant_type","axios","method","url","err","iziToast","timeout","title","response","status","message","position","reset","setSubmitting","ReCAPTCHA","size","sitekey","fluid","onClick","Modal","dimmer","open","Message","Content","error","post","resetForm","Description","id","Actions","loading","form","positive","labelPosition","Link","Register","displayName","formikProps","handleSubmit","iconPosition","disabled","isSubmitting","ResetPassword","isPasswordReset","setPasswordResetStatus","query","ManageOauth","onRemoveOauthProvider","provider","confirm","removeOauthProvider","section","List","divided","relaxed","verticalAlign","facebook","google","ChangePassword","Group","Or","Profile","Grid","columns","Column","vertical","getItem","ItemChart","key","text","Date","getFullYear","yearRange","setYearRange","useEffect","startYear","endYear","_yearRange$split","split","_yearRange$split2","fetchItemsByYearRange","years","property","push","toString","Highcharts","chart","xAxis","crosshair","yAxis","allowDecimals","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","credits","enabled","legend","accessibility","event","defaultValue","_isEmpty","basic","getCategories","CategoryChart","forEach","o","_o$items","y","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","showInLegend","colorByPoint","Dashboard","Card","raised","itemSchema","categoryId","brandId","purchaseDate","date","currency","price","number","payee","getBrands","ItemForm","useParams","navigate","useNavigate","categoryOptions","option","brandOptions","currencyOptions","description","format","parseISO","invoice","images","enableReinitialize","FormData","index","append","hasOwnProperty","updateItem","result","window","reload","createItem","_result$action","encType","SemanticUIForm","widths","currentTarget","ItemDetails","_item$assets","user","itemFormVisibleState","setItemFormVisibleState","onDeleteItem","deleteItem","onDeleteImage","itemId","fileId","assetId","deleteImage","assets","activeImage","find","active","Breadcrumb","Section","width","secure_url","alt","warning","Meta","FormattedNumber","FormattedDate","day","month","year","public_id","dangerouslySetInnerHTML","__html","isAdmin","asset","Label","corner","extra","TransitionablePortal","transition","animation","duration","Items","filterModal","setFilterModal","getItems","params","queryString","parse","setBrandId","_useState7","_useState8","setCategoryId","_useState9","startDate","_useState10","setStartDate","_useState11","endDate","_useState12","setEndDate","filter","e","discard","q","stringify","brandName","categoryName","dateRange","_useSelector","cards","_item$assets$","paginationLinks","idx","pageCount","link","page","stacked","Row","circular","totalCount","Subheader","floated","Input","itemsPerRow","textAlign","pagination","BrandForm","props","getBrand","BrandSchema","updateBrand","propTypes","PropTypes","Brands","rows","Table","Cell","createdBy","clearing","selectable","compact","HeaderCell","Body","CategoryForm","getCategory","group","CategorySchema","updateCategory","Categories","refCount","setLoading","isLoading","document","getElementById","App","Routes","Route","element","path","interceptors","request","use","config","Promise","reject","createRoot","render","Provider","store","IntlProvider","locale","BrowserRouter","future","v7_startTransition"],"sourceRoot":""}
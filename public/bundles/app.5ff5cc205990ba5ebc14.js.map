{"version":3,"file":"app.5ff5cc205990ba5ebc14.js","mappings":"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","sources":["webpack://gadget-catalog/./src/modules/user/client/user.types.js","webpack://gadget-catalog/./src/modules/user/client/user.reducer.js","webpack://gadget-catalog/./src/modules/item/client/item.types.js","webpack://gadget-catalog/./src/modules/item/client/item.reducer.js","webpack://gadget-catalog/./src/modules/brand/client/brand.types.js","webpack://gadget-catalog/./src/modules/brand/client/brand.reducer.js","webpack://gadget-catalog/./src/modules/category/client/category.types.js","webpack://gadget-catalog/./src/modules/category/client/category.reducer.js","webpack://gadget-catalog/./src/modules/core/client/reducers.js","webpack://gadget-catalog/./src/modules/core/client/store.js","webpack://gadget-catalog/./src/modules/core/client/NoMatch.js","webpack://gadget-catalog/./src/modules/core/client/PublicLayoutRoute.js","webpack://gadget-catalog/./src/modules/core/client/components/Navbar.js","webpack://gadget-catalog/./src/modules/core/client/components/footer.component.js","webpack://gadget-catalog/./src/modules/core/client/PrivateLayoutRoute.js","webpack://gadget-catalog/./src/modules/user/client/user.schema.js","webpack://gadget-catalog/./src/modules/core/client/components/IdentityProviders.js","webpack://gadget-catalog/./src/modules/core/client/components/FieldInputs.js","webpack://gadget-catalog/./src/modules/user/client/components/login.component.js","webpack://gadget-catalog/./src/modules/user/client/user.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/register.component.js","webpack://gadget-catalog/./src/modules/user/client/components/ResetPassword.js","webpack://gadget-catalog/./src/modules/user/client/components/ManageOauth.js","webpack://gadget-catalog/./src/modules/user/client/components/ChangePassword.js","webpack://gadget-catalog/./src/modules/user/client/components/profile.component.js","webpack://gadget-catalog/./src/modules/item/client/item.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/ItemChart.js","webpack://gadget-catalog/./src/modules/category/client/category.actions.js","webpack://gadget-catalog/./src/modules/user/client/components/CategoryChart.js","webpack://gadget-catalog/./src/modules/user/client/components/dashboard.component.js","webpack://gadget-catalog/./src/modules/item/client/item.schema.js","webpack://gadget-catalog/./src/modules/brand/client/brand.actions.js","webpack://gadget-catalog/./src/modules/item/client/components/item-form.component.js","webpack://gadget-catalog/./src/modules/item/client/components/item.component.js","webpack://gadget-catalog/./src/modules/item/client/components/items.component.js","webpack://gadget-catalog/./src/modules/brand/client/brand.schema.js","webpack://gadget-catalog/./src/modules/brand/client/brand-form.component.js","webpack://gadget-catalog/./src/modules/brand/client/brands.component.js","webpack://gadget-catalog/./src/modules/category/client/category.schema.js","webpack://gadget-catalog/./src/modules/category/client/components/category-form.component.js","webpack://gadget-catalog/./src/modules/category/client/components/categories.component.js","webpack://gadget-catalog/./src/modules/core/client/app.component.js","webpack://gadget-catalog/./src/modules/core/client/main.js"],"sourcesContent":["export default {\r\n    LOGIN: \"LOGIN\",\r\n    LOGIN_FULFILLED: \"LOGIN_FULFILLED\",\r\n    REGISTER: \"REGISTER\",\r\n    REGISTER_FULFILLED: \"REGISTER_FULFILLED\",\r\n    GET_PROFILE: \"GET_PROFILE\",\r\n    GET_PROFILE_FULFILLED: \"GET_PROFILE_FULFILLED\",\r\n    CHANGE_PASSWORD: \"CHANGE_PASSWORD\",\r\n    RESET_PASSWORD: \"RESET_PASSWORD\",\r\n    DISCONNECT_PROVIDER: \"DISCONNECT_PROVIDER\",\r\n    DISCONNECT_PROVIDER_FULFILLED: \"DISCONNECT_PROVIDER_FULFILLED\"\r\n};\r\n","import Types from \"./user.types\";\r\n\r\nconst initialState = {\r\n    loggedInUser: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.LOGIN_FULFILLED:\r\n        case Types.REGISTER_FULFILLED:\r\n        case Types.GET_PROFILE_FULFILLED:\r\n        case Types.DISCONNECT_PROVIDER_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                loggedInUser: action.payload.data\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    POST_ITEM: \"POST_ITEM\",\r\n    POST_ITEM_FULFILLED: \"POST_ITEM_FULFILLED\",\r\n    POST_ITEM_REJECTED: \"POST_ITEM_REJECTED\",\r\n    PUT_ITEM: \"PUT_ITEM\",\r\n    PUT_ITEM_FULFILLED: \"PUT_ITEM_FULFILLED\",\r\n    PUT_ITEM_REJECTED: \"PUT_ITEM_REJECTED\",\r\n    GET_ITEM: \"GET_ITEM\",\r\n    GET_ITEM_PENDING: \"GET_ITEM_PENDING\",\r\n    GET_ITEM_FULFILLED: \"GET_ITEM_FULFILLED\",\r\n    GET_ITEM_REJECTED: \"GET_ITEM_REJECTED\",\r\n    GET_ITEMS: \"GET_ITEMS\",\r\n    GET_ITEMS_FULFILLED: \"GET_ITEMS_FULFILLED\",\r\n    DELETE_ITEM: \"DELETE_ITEM\",\r\n    DELETE_ITEM_FULFILLED: \"DELETE_ITEM_FULFILLED\",\r\n    DELETE_ITEM_IMAGE: \"DELETE_ITEM_IMAGE\",\r\n    UPDATE_ITEM_IMAGE: \"UPDATE_ITEM_IMAGE\",\r\n    UPDATE_ITEM_IMAGE_FULFILLED: \"UPDATE_ITEM_IMAGE_FULFILLED\",\r\n    DELETE_ITEM_IMAGE_FULFILLED: \"DELETE_ITEM_IMAGE_FULFILLED\",\r\n    GET_ITEMS_BY_YEAR: \"GET_ITEMS_BY_YEAR\",\r\n    GET_ITEMS_BY_YEAR_FULFILLED: \"GET_ITEMS_BY_YEAR_FULFILLED\"\r\n};\r\n","import Types from \"./item.types\";\r\n\r\nconst initialState = {\r\n    item: null,\r\n    itemsPerYear: null,\r\n    items: { data: [], metadata: { pages: [] }}\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch(action.type) {\r\n        case Types.GET_ITEM_PENDING: {\r\n            return { ...state };\r\n        }\r\n        case Types.GET_ITEM_FULFILLED: {\r\n            return { ...state, item: action.payload.data };\r\n        }\r\n        case Types.GET_ITEMS_FULFILLED: {\r\n            return { ...state, items: { data: action.payload.data.data, metadata: action.payload.data.metadata }};\r\n        }\r\n        case Types.UPDATE_ITEM_IMAGE_FULFILLED:\r\n        case Types.DELETE_ITEM_IMAGE_FULFILLED: {\r\n            return { ...state, item: { ...state.item, files: action.payload.data.files }};\r\n        }\r\n        case Types.GET_ITEMS_BY_YEAR_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                itemsPerYear: action.payload.data\r\n            };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    GET_BRANDS: \"GET_BRANDS\",\r\n    GET_BRANDS_FULFILLED: \"GET_BRANDS_FULFILLED\",\r\n    POST_BRAND: \"POST_BRAND\",\r\n    POST_BRAND_FULFILLED: \"POST_BRAND_FULFILLED\",\r\n    PUT_BRAND: \"PUT_BRAND\",\r\n    PUT_BRAND_FULFILLED: \"PUT_BRAND_FULFILLED\",\r\n    GET_BRAND: \"GET_BRAND\",\r\n    GET_BRAND_FULFILLED: \"GET_BRAND_FULFILLED\"\r\n};\r\n","import Types from \"./brand.types\";\r\n\r\nconst initialState = {\r\n    brands: [],\r\n    brand: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.GET_BRANDS_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                brands: action.payload.data\r\n            };\r\n        }\r\n        case Types.GET_BRAND_FULFILLED: {\r\n            return { ...state, brand: action.payload.data };\r\n        }\r\n        case Types.POST_BRAND_FULFILLED: {\r\n            return { ...state, brands: state.brands.concat(action.payload.data) };\r\n        }\r\n        case Types.PUT_BRAND_FULFILLED: {\r\n            const brands = state.brands.map(function(x) {\r\n                if(x._id === action.payload.data._id) {\r\n                    x.name = action.payload.data.name;\r\n                }\r\n                return x;\r\n            });\r\n            return { ...state, brands: brands };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","export default {\r\n    GET_CATEGORIES: \"GET_CATEGORIES\",\r\n    GET_CATEGORIES_FULFILLED: \"GET_CATEGORIES_FULFILLED\",\r\n    GET_CATEGORIES_REJECTED: \"GET_CATEGORIES_REJECTED\",\r\n    POST_CATEGORY: \"POST_CATEGORY\",\r\n    POST_CATEGORY_FULFILLED: \"POST_CATEGORY_FULFILLED\",\r\n    PUT_CATEGORY: \"PUT_CATEGORY\",\r\n    PUT_CATEGORY_FULFILLED: \"PUT_CATEGORY_FULFILLED\",\r\n    PUT_CATEGORY_REJECTED: \"PUT_CATEGORY_REJECTED\",\r\n    GET_CATEGORY: \"GET_CATEGORY\",\r\n    GET_CATEGORY_PENDING: \"GET_CATEGORY_PENDING\",\r\n    GET_CATEGORY_FULFILLED: \"GET_CATEGORY_FULFILLED\",\r\n    GET_CATEGORY_REJECTED: \"GET_CATEGORY_REJECTED\"\r\n};\r\n","import Types from \"./category.types\";\r\n\r\nconst initialState = {\r\n    categories: [],\r\n    category: null\r\n};\r\n\r\nexport default function reducer(state=initialState, action) {\r\n    switch (action.type) {\r\n        case Types.GET_CATEGORIES_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                categories: action.payload.data\r\n            };\r\n        }\r\n        case Types.GET_CATEGORY_FULFILLED: {\r\n            return {\r\n                ...state,\r\n                category: action.payload.data\r\n            };\r\n        }\r\n        case Types.PUT_CATEGORY_REJECTED: {\r\n            return state;\r\n        }\r\n    }\r\n    return state;\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"../../user/client/user.reducer\";\r\nimport itemReducer from \"../../item/client/item.reducer\";\r\nimport brandReducer from \"../../brand/client/brand.reducer\";\r\nimport categoryReducer from \"../../category/client/category.reducer\";\r\n\r\nexport default combineReducers({\r\n    userReducer,\r\n    itemReducer,\r\n    brandReducer,\r\n    categoryReducer\r\n})\r\n","import thunkMiddleware from \"redux-thunk\";\r\nimport promise from \"redux-promise-middleware\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport default configureStore({\r\n    reducer: reducers,\r\n    middleware: [promise, thunkMiddleware]\r\n});\r\n","import React from \"react\";\r\nimport { Container, Icon, Header, Divider, Segment, Button } from \"semantic-ui-react\";\r\n\r\nexport default function NoMatch() {\r\n    return (\r\n        <Container>\r\n            <Divider hidden/>\r\n            <Segment placeholder>\r\n                <Header icon>\r\n                    <Icon name=\"search\" color=\"red\"/>\r\n                    The page you are looking for might have been removed had its name changed or is temporarily unavailable.\r\n                </Header>\r\n                <Segment.Inline>\r\n                    <Button primary href=\"/\">GO HOME</Button>\r\n                </Segment.Inline>\r\n            </Segment>\r\n        </Container>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Outlet, Navigate, useLocation } from \"react-router-dom\";\r\n\r\nexport default function PublicLayoutRoute() {\r\n    const location = useLocation();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        loggedInUser ? (\r\n            <Navigate to={ location.state?.from?.pathname || \"/\" } state={{ from: location }} replace/>\r\n        ) : (\r\n            <Outlet/>\r\n        )\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Menu, Container, Icon } from \"semantic-ui-react\";\r\n\r\nexport default function Navbar() {\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        <Menu stackable borderless>\r\n            <Container>\r\n                <Menu.Item header style={{paddingLeft: 0}}>\r\n                    <img src=\"/images/logo.png\"/>\r\n                </Menu.Item>\r\n                <NavLink to=\"/\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"dashboard\" color=\"teal\"/>\r\n                    Dashboard\r\n                </NavLink>\r\n                <NavLink to=\"/items\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"desktop\" color=\"teal\"/> Manage Items\r\n                </NavLink>\r\n                <NavLink to=\"/categories\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"sitemap\" color=\"teal\"/> Manage Categories\r\n                </NavLink>\r\n                <NavLink to=\"/brands\" className={({ isActive }) => \"item\" + (isActive ? \" active\" : \"\")}>\r\n                    <Icon name=\"apple\" color=\"teal\"/> Manage Brands\r\n                </NavLink>\r\n                <div className=\"right item\" style={{paddingRight: 0}}>\r\n                    <NavLink to=\"/profile\" className=\"ui button teal\"><Icon name=\"user\"/> {loggedInUser.name}</NavLink>\r\n                    <a href=\"/api/logout\" className=\"ui button black\" style={{marginLeft: '5px'}}><Icon name=\"sign out\"/> Sign Out</a>\r\n                </div>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className=\"ui inverted vertical footer segment\">\r\n            <div className=\"ui center aligned container\">\r\n                <div className=\"ui stackable inverted divided grid\">\r\n                    <div className=\"four wide column\">\r\n                        <h4 className=\"ui inverted header\">Community</h4>\r\n                        <div className=\"ui inverted link list\">\r\n                            <a className=\"item\" href=\"https://github.com/shibbir/gadget-catalog\">GitHub</a>\r\n                            <a className=\"item\" href=\"https://github.com/shibbir/gadget-catalog/issues\">Issues</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"four wide column\">\r\n                        <h4 className=\"ui inverted header\">Technology stack</h4>\r\n                        <div className=\"ui inverted link list\">\r\n                            <a className=\"item\" href=\"https://reactjs.org/\">React</a>\r\n                            <a className=\"item\" href=\"https://react-redux.js.org/\">Redux</a>\r\n                            <a className=\"item\" href=\"https://expressjs.com/\">Express</a>\r\n                            <a className=\"item\" href=\"https://www.mongodb.com/\">MongoDB</a>\r\n                            <a className=\"item\" href=\"https://www.passportjs.org/\">Passport</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"eight wide right floated column\">\r\n                        <h4 className=\"ui inverted teal header\">Help Preserve This Project!</h4>\r\n                        <p>\r\n                            Developed by <a href=\"https://shibbir.io\">Shibbir Ahmed</a>.\r\n                            Code licensed <a rel=\"license\" href=\"https://github.com/shibbir/gadget-catalog/blob/master/LICENSE\">MIT</a>.\r\n                        </p>\r\n                        <Button className=\"large teal\" href=\"https://github.com/shibbir/gadget-catalog\">\r\n                            <Icon name=\"github\"/> Star\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Container, Divider } from \"semantic-ui-react\";\r\nimport { Outlet, Navigate, useLocation } from \"react-router-dom\";\r\n\r\nimport Navbar from \"./components/Navbar\";\r\nimport Footer from \"./components/footer.component\";\r\n\r\nexport default function PrivateLayoutRoute() {\r\n    const location = useLocation();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    return (\r\n        loggedInUser ? (\r\n            <>\r\n                <Navbar/>\r\n                <Container className=\"site-content\">\r\n                    <Outlet/>\r\n                    <Divider hidden/>\r\n                </Container>\r\n                <Footer/>\r\n            </>\r\n        ) : (\r\n            <Navigate to=\"login\" state={{ from: location }} replace/>\r\n        )\r\n    );\r\n}\r\n","import { string, object, ref } from \"yup\";\r\n\r\nexport const loginSchema = object().shape({\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .required(\"This field must not be empty.\"),\r\n    password: string()\r\n        .required(\"This field must not be empty.\")\r\n});\r\n\r\nexport const registerSchema = object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(25, \"This field must be at most 25 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .max(30, \"This field must be at most 30 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    password: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n\r\nexport const changePasswordSchema = object().shape({\r\n    currentPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    newPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    confirmNewPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n        .oneOf([ref(\"newPassword\"), null], \"Passwords doesn't match.\")\r\n});\r\n\r\nexport const resetPasswordSchema = object().shape({\r\n    newPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    confirmNewPassword: string()\r\n        .min(8, \"This field must be at least 8 characters long.\")\r\n        .max(60, \"This field must be at most 60 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n        .oneOf([ref(\"newPassword\"), null], \"Passwords doesn't match.\")\r\n});\r\n\r\nexport const forgotPasswordSchema = object().shape({\r\n    email: string()\r\n        .email(\"This field should be an valid email address.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import React from \"react\";\r\nimport { Button, Segment, Icon, Divider } from \"semantic-ui-react\";\r\n\r\nexport default function IdentityProviders() {\r\n    return (\r\n        <>\r\n            <Divider hidden/>\r\n            <Segment className=\"stacked center aligned\">\r\n                <Divider horizontal>or, use third party identity providers</Divider>\r\n                <div>\r\n                    <Button color=\"facebook\" href=\"/auth/facebook\">\r\n                        <Icon name=\"facebook\"/> Facebook\r\n                    </Button>\r\n                    <Button color=\"google plus\" href=\"/auth/google\">\r\n                        <Icon name=\"google plus\"/> Google\r\n                    </Button>\r\n                </div>\r\n            </Segment>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { Form, Icon } from \"semantic-ui-react\";\r\nimport { Editor } from \"@tinymce/tinymce-react\";\r\n\r\nexport const TextInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            { attributes.icon &&\r\n                <div className=\"ui fluid input left icon\">\r\n                    <Icon name={attributes.icon}/>\r\n                    <Field type={attributes.type} name={attributes.name} placeholder={attributes.placeholder} autoComplete={attributes.autoComplete } />\r\n                </div>\r\n            }\r\n\r\n            { !attributes.icon &&\r\n                <div className=\"ui fluid input\">\r\n                    <Field type={attributes.type} name={attributes.name} autoComplete={attributes.autoComplete }/>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const TextareaInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            { attributes.icon &&\r\n                <div className=\"ui fluid input left icon\">\r\n                    <Icon name={attributes.icon}/>\r\n                    <Field type={attributes.type} name={attributes.name} placeholder={attributes.placeholder} autoComplete={attributes.autoComplete } />\r\n                </div>\r\n            }\r\n\r\n            { !attributes.icon &&\r\n                <div className=\"ui fluid input\">\r\n                    <Field component=\"textarea\" name={attributes.name} autoComplete={attributes.autoComplete }/>\r\n                </div>\r\n            }\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const RichEditorInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            <Editor\r\n                apiKey={process.env.TINYCLOUD_API_KEY}\r\n                value={attributes.value}\r\n                init={{\r\n                    height: 400,\r\n                    menubar: false,\r\n                    plugins: [\r\n                        'advlist', 'autolink', 'lists', 'link',\r\n                        'anchor', 'visualblocks', 'code',\r\n                        'insertdatetime', 'table'\r\n                    ],\r\n                    toolbar: 'blocks | ' +\r\n                        'bold italic forecolor | ' +\r\n                        'bullist numlist | ' +\r\n                        'removeformat',\r\n                    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\r\n                    placeholder: attributes.placeholder\r\n                }}\r\n                onEditorChange={(content) => {\r\n                    attributes.setFieldValue(attributes.name, content);\r\n                }}\r\n            />\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const DropdownInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            <Form.Select search {...attributes} options={attributes.options}/>\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name} />\r\n            </div>\r\n        </Form.Field>\r\n    );\r\n};\r\n\r\nexport const FileInput = ({ attributes }) => {\r\n    return (\r\n        <Form.Field required={attributes.required}>\r\n            { attributes.label && <label>{attributes.label}</label> }\r\n\r\n            <div className=\"field\" style={{margin: 0}}>\r\n                <div className=\"ui input\">\r\n                    <input type=\"file\" name={attributes.name} multiple={attributes.multiple} accept=\"image/*\" onChange={attributes.onChange}/>\r\n                </div>\r\n            </div>\r\n\r\n            <small>{attributes.info}</small>\r\n\r\n            <div className=\"field-validation-error\">\r\n                <ErrorMessage name={attributes.name}/>\r\n            </div>\r\n\r\n        </Form.Field>\r\n    );\r\n};\r\n","import axios from \"axios\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { Button, Segment, Header, Divider, Image, Modal, Message, Icon } from \"semantic-ui-react\";\r\n\r\nimport { login } from \"../user.actions\";\r\nimport { loginSchema, forgotPasswordSchema } from \"../user.schema\";\r\nimport IdentityProviders from \"../../../core/client/components/IdentityProviders\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function Login() {\r\n    const dispatch = useDispatch();\r\n    const recaptchaRef = useRef();\r\n    const [emailSent, setEmailSent] = useState(false);\r\n    const [isPasswordResetModalActive, setIsPasswordResetModalActive] = useState(false);\r\n    const [forgotpasswordResponse, setForgotpasswordResponse] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"370px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Log-in to your account\r\n                    </div>\r\n                </Header>\r\n\r\n                <Segment className=\"stacked\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: \"\",\r\n                            password: \"\"\r\n                        }}\r\n                        validationSchema={loginSchema}\r\n                        onSubmit={(values, actions) => {\r\n                            recaptchaRef.current.executeAsync().then(recaptchaToken => {\r\n                                dispatch(login({\r\n                                    username: values.email,\r\n                                    password: values.password,\r\n                                    grant_type: \"password\",\r\n                                    recaptchaToken\r\n                                })).catch(function(err) {\r\n                                    iziToast[\"error\"]({\r\n                                        timeout: 3000,\r\n                                        title: err.response.status,\r\n                                        message: err.response.data,\r\n                                        position: \"topRight\"\r\n                                    });\r\n                                });\r\n                                recaptchaRef.current.reset();\r\n                                actions.setSubmitting(false);\r\n                            });\r\n                        }}\r\n                    >\r\n                        <Form className=\"ui form\">\r\n                            <TextInput attributes={{\r\n                                name: \"email\",\r\n                                type: \"email\",\r\n                                icon: \"mail\",\r\n                                placeholder: \"Email address\",\r\n                                autoComplete: \"username\"\r\n                            }}/>\r\n\r\n                            <TextInput attributes={{\r\n                                name: \"password\",\r\n                                type: \"password\",\r\n                                icon: \"lock\",\r\n                                placeholder: \"Password\",\r\n                                autoComplete: \"current-password\"\r\n                            }}/>\r\n\r\n                            <ReCAPTCHA\r\n                                size=\"invisible\"\r\n                                ref={recaptchaRef}\r\n                                sitekey={process.env.RECAPTCHA_SITE_KEY}\r\n                            />\r\n\r\n                            <Button fluid type=\"submit\" className=\"large teal\">Login</Button>\r\n                        </Form>\r\n                    </Formik>\r\n\r\n                    <button className=\"ui primary tertiary button\" onClick={() => setIsPasswordResetModalActive(true)}>Forgot password?</button>\r\n\r\n                    <Modal dimmer=\"blurring\" size=\"tiny\" open={isPasswordResetModalActive}>\r\n                        { emailSent &&\r\n                            <Message info icon>\r\n                                <Icon name=\"mail\"/>\r\n                                <Message.Content>\r\n                                    <Message.Header>Check your email</Message.Header>\r\n                                    We just sent an email to you with a link to reset your password!\r\n                                </Message.Content>\r\n                            </Message>\r\n                        }\r\n\r\n                        { forgotpasswordResponse &&\r\n                            <Message error icon>\r\n                                <Icon name=\"frown\"/>\r\n                                <Message.Content>\r\n                                    <Message.Header>Attention!</Message.Header>\r\n                                    {forgotpasswordResponse}\r\n                                </Message.Content>\r\n                            </Message>\r\n                        }\r\n\r\n                        <Formik\r\n                            initialValues={{\r\n                                email: \"\"\r\n                            }}\r\n                            validationSchema={forgotPasswordSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                axios.post(\"/api/forgot-password\", {...values}).then(() => {\r\n                                    setEmailSent(true);\r\n                                    setForgotpasswordResponse(\"\");\r\n                                }).catch(error => {\r\n                                    setForgotpasswordResponse(error.response.data);\r\n                                });\r\n\r\n                                actions.resetForm();\r\n                                actions.setSubmitting(false);\r\n                            }}\r\n                        >\r\n                            <>\r\n                                <Modal.Header>Reset Your Password</Modal.Header>\r\n                                <Modal.Content>\r\n                                    <Modal.Description>\r\n                                        <p>Enter your email address and we'll send you a link to reset your password.</p>\r\n                                        <Form id=\"passwordResetForm\">\r\n                                            <TextInput attributes={{\r\n                                                name: \"email\",\r\n                                                type: \"email\",\r\n                                                icon: \"mail\",\r\n                                                placeholder: \"E-mail address\",\r\n                                                autoComplete: \"username\"\r\n                                            }}/>\r\n                                        </Form>\r\n                                    </Modal.Description>\r\n                                </Modal.Content>\r\n                                <Modal.Actions>\r\n                                    <Button color=\"black\" onClick={() => {setIsPasswordResetModalActive(false); setEmailSent(false); setForgotpasswordResponse(\"\");}}>\r\n                                        Close\r\n                                    </Button>\r\n                                    <Button\r\n                                        loading={false}\r\n                                        form=\"passwordResetForm\"\r\n                                        type=\"submit\"\r\n                                        positive\r\n                                        icon=\"arrow right\"\r\n                                        labelPosition=\"right\"\r\n                                        content=\"Send e-mail\"\r\n                                    />\r\n                                </Modal.Actions>\r\n                            </>\r\n                        </Formik>\r\n                    </Modal>\r\n\r\n                    <Divider hidden/>\r\n                    Don't have an account? <Link to=\"/register\">Sign up</Link>.\r\n                </Segment>\r\n\r\n                This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n\r\n                <IdentityProviders/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./user.types\";\r\n\r\nexport function getSignedInUserProfile() {\r\n    return {\r\n        type: Types.GET_PROFILE,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/profile\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function login(formData) {\r\n    return {\r\n        type: Types.LOGIN,\r\n        payload: axios({\r\n            method: \"post\",\r\n            url: \"/api/login\",\r\n            data: formData\r\n        })\r\n    };\r\n}\r\n\r\nexport function register(formData) {\r\n    return {\r\n        type: Types.REGISTER,\r\n        payload: axios({\r\n            method: \"post\",\r\n            url: \"/api/register\",\r\n            data: formData\r\n        })\r\n    };\r\n}\r\n\r\nexport function changePassword(formData) {\r\n    return {\r\n        type: Types.CHANGE_PASSWORD,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: \"/api/profile/change-password\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function resetPassword(formData, query) {\r\n    return {\r\n        type: Types.RESET_PASSWORD,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/reset-password${query}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function removeOauthProvider(provider) {\r\n    return {\r\n        type: Types.DISCONNECT_PROVIDER,\r\n        payload: axios({\r\n            method: \"put\",\r\n            url: `/api/auth/disconnect?provider=${provider}`\r\n        })\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, Segment, Header, Divider, Image } from \"semantic-ui-react\";\r\n\r\nimport { register } from \"../user.actions\";\r\nimport { registerSchema } from \"../user.schema\";\r\nimport IdentityProviders from \"../../../core/client/components/IdentityProviders\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function Register() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"380px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Sign up for a new account\r\n                    </div>\r\n                </Header>\r\n\r\n                <Segment className=\"stacked\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            name: \"\",\r\n                            email: \"\",\r\n                            password: \"\"\r\n                        }}\r\n                        displayName=\"Register\"\r\n                        validationSchema={registerSchema}\r\n                        onSubmit={(values, actions) => {\r\n                            dispatch(register(values));\r\n\r\n                            actions.resetForm();\r\n                            actions.setSubmitting(false);\r\n                        }}\r\n                    >\r\n                        {formikProps => (\r\n                            <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                                <TextInput attributes={{\r\n                                    type: \"text\",\r\n                                    name: \"name\",\r\n                                    placeholder: \"Name\",\r\n                                    icon: \"users\",\r\n                                    iconPosition: \"left\"\r\n                                }}/>\r\n                                <TextInput attributes={{\r\n                                    type: \"email\",\r\n                                    name: \"email\",\r\n                                    placeholder: \"E-mail address\",\r\n                                    icon: \"mail\",\r\n                                    iconPosition: \"left\",\r\n                                    autoComplete: \"username\"\r\n                                }}/>\r\n                                <TextInput attributes={{\r\n                                    type: \"password\",\r\n                                    name: \"password\",\r\n                                    placeholder: \"Password\",\r\n                                    icon: \"lock\",\r\n                                    iconPosition: \"left\",\r\n                                    autoComplete: \"new-password\"\r\n                                }}/>\r\n\r\n                                <Button fluid type=\"submit\" className=\"large teal\" disabled={formikProps.isSubmitting}>Register</Button>\r\n                                <Divider hidden/>\r\n                                Already have an account? <Link to=\"/login\">Sign in</Link>.\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n\r\n                </Segment>\r\n\r\n                This site is protected by reCAPTCHA and the Google <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\r\n\r\n                <IdentityProviders/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button, Segment, Header, Image, Message } from \"semantic-ui-react\";\r\n\r\nimport { resetPassword } from \"../user.actions\";\r\nimport { resetPasswordSchema } from \"../user.schema\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ResetPassword() {\r\n    const [isPasswordReset, setPasswordResetStatus] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div className=\"ui middle aligned center aligned grid\">\r\n            <div style={{ maxWidth: \"450px\" }}>\r\n                <Header as=\"h2\" className=\"teal center aligned\">\r\n                    <Image src={`images/logo.png`}/>\r\n                    <div className=\"content\">\r\n                        Reset your password\r\n                    </div>\r\n                </Header>\r\n\r\n                { isPasswordReset &&\r\n                    <Message info>\r\n                        Your password is changed. Please <Link to=\"/login\">sign in</Link> to your account.\r\n                    </Message>\r\n                }\r\n\r\n                <Formik\r\n                    initialValues={{\r\n                        newPassword: \"\",\r\n                        confirmNewPassword: \"\"\r\n                    }}\r\n                    validationSchema={resetPasswordSchema}\r\n                    onSubmit={(values, actions) => {\r\n                        dispatch(resetPassword(values, location.search)).then(() => {\r\n                            setPasswordResetStatus(true);\r\n                        });\r\n\r\n                        actions.resetForm();\r\n                        actions.setSubmitting(false);\r\n                    }}\r\n                >\r\n                    <Form className=\"ui form large\">\r\n                        <Segment className=\"stacked\">\r\n                            <TextInput attributes={{\r\n                                type: \"password\",\r\n                                name: \"newPassword\",\r\n                                label: \"New password\",\r\n                                autoComplete: \"new-password\"\r\n                            }}/>\r\n                            <TextInput attributes={{\r\n                                type: \"password\",\r\n                                name: \"confirmNewPassword\",\r\n                                label: \"Confirm new password\",\r\n                                autoComplete: \"new-password\"\r\n                            }}/>\r\n\r\n                            <Button fluid type=\"submit\" className=\"large teal\">Reset password</Button>\r\n                            <Divider hidden/>\r\n                            Remembered you password? <Link to=\"/login\">Sign in</Link>.\r\n                        </Segment>\r\n                    </Form>\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Divider } from \"semantic-ui-react\";\r\nimport { removeOauthProvider } from \"../user.actions\";\r\n\r\nexport default function ManageOauth() {\r\n    const dispatch = useDispatch();\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    const onRemoveOauthProvider = provider => {\r\n        if(confirm(\"Are you sure?\")) {\r\n            dispatch(removeOauthProvider(provider));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Manage Oauth providers</h3>\r\n            <Divider section/>\r\n\r\n            <List divided relaxed>\r\n                <List.Item>\r\n                    <List.Icon name=\"facebook\" size=\"large\" verticalAlign=\"middle\" color=\"blue\"/>\r\n                    <List.Content>\r\n                        <List.Header>Facebook</List.Header>\r\n                        <List.Description>\r\n                            { !loggedInUser.facebook &&\r\n                                <a href=\"/oauth/facebook\">[Connect]</a>\r\n                            }\r\n                            { loggedInUser.facebook &&\r\n                                <div>\r\n                                    {loggedInUser.facebook.email} <a onClick={() => onRemoveOauthProvider(\"facebook\")}>[Disconnect]</a>\r\n                                </div>\r\n                            }\r\n                        </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n                <List.Item>\r\n                    <List.Icon name=\"google\" size=\"large\" verticalAlign=\"middle\" color=\"red\"/>\r\n                    <List.Content>\r\n                        <List.Header>Google</List.Header>\r\n                    <List.Description>\r\n                        { !loggedInUser.google &&\r\n                            <a href=\"/oauth/google\">[Connect]</a>\r\n                        }\r\n                        { loggedInUser.google &&\r\n                            <div>\r\n                                {loggedInUser.google.email} <a onClick={() => onRemoveOauthProvider(\"google\")}>[Disconnect]</a>\r\n                            </div>\r\n                        }\r\n                    </List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\n\r\nimport { changePasswordSchema } from \"../user.schema\";\r\nimport { changePassword } from \"../user.actions\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ChangePassword() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            <h3>Change local account password</h3>\r\n            <Divider section/>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    currentPassword: \"\",\r\n                    newPassword: \"\",\r\n                    confirmNewPassword: \"\"\r\n                }}\r\n                displayName=\"ChangePassword\"\r\n                validationSchema={changePasswordSchema}\r\n                onSubmit={(values, actions) => {\r\n                    dispatch(changePassword(values));\r\n\r\n                    actions.resetForm();\r\n                    actions.setSubmitting(false);\r\n                }}\r\n            >\r\n                {formikProps => (\r\n                    <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"currentPassword\",\r\n                            label: \"Current password\",\r\n                            autoComplete: \"current-password\"\r\n                        }}/>\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"newPassword\",\r\n                            label: \"New password\",\r\n                            autoComplete: \"new-password\"\r\n                        }}/>\r\n                        <TextInput attributes={{\r\n                            type: \"password\",\r\n                            name: \"confirmNewPassword\",\r\n                            label: \"Confirm new password\",\r\n                            autoComplete: \"new-password\"\r\n                        }}/>\r\n                        <Divider hidden/>\r\n                        <Button.Group>\r\n                            <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Change password</Button>\r\n                            <Button.Or/>\r\n                            <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                        </Button.Group>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Divider, Grid, Segment } from \"semantic-ui-react\";\r\nimport ManageOauth from \"./ManageOauth\";\r\nimport ChangePassword from \"./ChangePassword\";\r\n\r\nexport default function Profile() {\r\n    return (\r\n        <Segment>\r\n            <Grid columns={2} relaxed=\"very\" stackable>\r\n                <Grid.Column>\r\n                    <ChangePassword/>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                    <ManageOauth/>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n            <Divider vertical>Or</Divider>\r\n        </Segment>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./item.types\";\r\n\r\nexport function createItem(formData) {\r\n    return {\r\n        type: Types.POST_ITEM,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/items\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateItem(formData, id) {\r\n    return {\r\n        type: Types.PUT_ITEM,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getItem(id) {\r\n    return {\r\n        type: Types.GET_ITEM,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function deleteItem(id) {\r\n    return {\r\n        type: Types.DELETE_ITEM,\r\n        payload: axios({\r\n            method: \"delete\",\r\n            url: `/api/items/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getItems(query = \"\") {\r\n    return {\r\n        type: Types.GET_ITEMS,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items${query}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function setAsActiveImage(itemId, fileId) {\r\n    return {\r\n        type: Types.UPDATE_ITEM_IMAGE,\r\n        payload: axios({\r\n            method: \"put\",\r\n            url: `/api/items/${itemId}/images/${fileId}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function deleteImage(itemId, fileId) {\r\n    return {\r\n        type: Types.DELETE_ITEM_IMAGE,\r\n        payload: axios({\r\n            method: \"delete\",\r\n            url: `/api/items/${itemId}/images/${fileId}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function fetchItemsByYearRange(startYear, endYear) {\r\n    return {\r\n        type: Types.GET_ITEMS_BY_YEAR,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/items/item-count?start_year=${startYear}&end_year=${endYear}`\r\n        })\r\n    };\r\n}\r\n","import { isEmpty } from \"lodash\";\r\nimport Highcharts from \"highcharts\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Select, Icon, Segment, Header } from \"semantic-ui-react\";\r\n\r\nimport { fetchItemsByYearRange } from \"../../../item/client/item.actions\";\r\n\r\nexport default function ItemChart() {\r\n    const options = [\r\n        { key: \"2021-2030\", value: \"2021-2030\", text: \"2021-2030\" },\r\n        { key: \"2011-2020\", value: \"2011-2020\", text: \"2011-2020\" },\r\n        { key: \"2001-2010\", value: \"2001-2010\", text: \"2001-2010\" }\r\n    ];\r\n\r\n    const [yearRange, setYearRange] = useState(`${new Date().getFullYear()}-${new Date().getFullYear() + 9}`);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let startYear, endYear;\r\n        [startYear, endYear] = yearRange.split(\"-\");\r\n\r\n        dispatch(fetchItemsByYearRange(startYear, endYear));\r\n    }, [dispatch, yearRange]);\r\n\r\n    const itemsPerYear = useSelector(state => state.itemReducer.itemsPerYear);\r\n\r\n    useEffect(() => {\r\n        let years = [];\r\n        let items = [];\r\n\r\n        for (const property in itemsPerYear) {\r\n            years.push(property.toString());\r\n            items.push(itemsPerYear[property]);\r\n        }\r\n\r\n        if(items.length && years.length) {\r\n            Highcharts.chart(\"item-chart\", {\r\n                chart: {\r\n                    type: \"column\"\r\n                },\r\n                title: {\r\n                    text: `Items purchased between year (${yearRange})`\r\n                },\r\n                xAxis: {\r\n                    categories: years,\r\n                    crosshair: true\r\n                },\r\n                yAxis: {\r\n                    min: 0,\r\n                    title: {\r\n                        text: \"Number of Items\"\r\n                    },\r\n                    allowDecimals: false\r\n                },\r\n                tooltip: {\r\n                    headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                    pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                        '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\r\n                    footerFormat: '</table>',\r\n                    shared: true,\r\n                    useHTML: true\r\n                },\r\n                plotOptions: {\r\n                    column: {\r\n                        pointPadding: 0.2,\r\n                        borderWidth: 0\r\n                    }\r\n                },\r\n                series: [{\r\n                    name: \"Total Items\",\r\n                    data: items\r\n                }],\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                legend: {\r\n                    enabled: false\r\n                },\r\n                accessibility: {\r\n                    enabled: false\r\n                }\r\n            });\r\n        }\r\n    }, [itemsPerYear]);\r\n\r\n    return (\r\n        <>\r\n            <Select onChange={(event, data) => {setYearRange(data.value)}} options={options} defaultValue={options[0].value}/>\r\n\r\n            <div id=\"item-chart\"></div>\r\n\r\n            { isEmpty(itemsPerYear) &&\r\n                <Segment placeholder basic>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        Not enough data is available to generate the report.\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport Types from \"./category.types\";\r\n\r\nexport function getCategories() {\r\n    return {\r\n        type: Types.GET_CATEGORIES,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/categories\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function createCategory(formData) {\r\n    return {\r\n        type: Types.POST_CATEGORY,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/categories\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateCategory(formData, id) {\r\n    return {\r\n        type: Types.PUT_CATEGORY,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/categories/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getCategory(id) {\r\n    return {\r\n        type: Types.GET_CATEGORY,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/categories/${id}`\r\n        })\r\n    };\r\n}\r\n","import Highcharts from \"highcharts\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Icon, Segment, Header, Button } from \"semantic-ui-react\";\r\n\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\n\r\nexport default function CategoryChart() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories());\r\n    }, [dispatch]);\r\n\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    useEffect(() => {\r\n        if(categories.length) {\r\n            let data = [];\r\n\r\n            categories.forEach(o => {\r\n                if(o.items?.length) {\r\n                    data.push({\r\n                        name: o.name,\r\n                        y: o.items.length\r\n                    });\r\n                } else {\r\n                    data.push({\r\n                        name: o.name,\r\n                        y: 0\r\n                    });\r\n                }\r\n            });\r\n\r\n            Highcharts.chart(\"category-chart\", {\r\n                chart: {\r\n                    plotBackgroundColor: null,\r\n                    plotBorderWidth: null,\r\n                    plotShadow: false\r\n                },\r\n                title: {\r\n                    text: \"Gadget Categories\"\r\n                },\r\n                tooltip: {\r\n                    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n                },\r\n                plotOptions: {\r\n                    pie: {\r\n                        allowPointSelect: true,\r\n                        cursor: \"pointer\",\r\n                        dataLabels: {\r\n                            enabled: true\r\n                        },\r\n                        showInLegend: true\r\n                    }\r\n                },\r\n                series: [{\r\n                    type: \"pie\",\r\n                    name: \"Categories\",\r\n                    colorByPoint: true,\r\n                    data\r\n                }],\r\n                credits: {\r\n                    enabled: false\r\n                },\r\n                accessibility: {\r\n                    enabled: false\r\n                }\r\n            });\r\n        }\r\n    }, [categories]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"category-chart\"></div>\r\n\r\n            { !categories.length &&\r\n                <Segment placeholder basic>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        Not enough data is available to generate this report.\r\n                    </Header>\r\n                    <Button primary>\r\n                        <Link to=\"/items/add\" style={{color: \"white\"}}>Add New Item</Link>\r\n                    </Button>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Card, Icon } from \"semantic-ui-react\";\r\n\r\nimport ItemChart from \"./ItemChart\";\r\nimport CategoryChart from \"./CategoryChart\";\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <div id=\"dashboard\">\r\n            <Card raised fluid>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <Icon name=\"pie chart\"/>\r\n                        Category percentages\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    <CategoryChart/>\r\n                </Card.Content>\r\n            </Card>\r\n\r\n            <Card raised fluid>\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <Icon name=\"bar chart\"/>\r\n                        Yearly report on purchased items\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Card.Content>\r\n                    <ItemChart/>\r\n                </Card.Content>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","import { string, object, number, date } from \"yup\";\r\n\r\nexport const itemSchema = object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(50, \"This field must be at most 50 characters long.\")\r\n        .required(\"This field must not be empty.\"),\r\n    categoryId: string()\r\n        .required(\"This field must not be empty.\"),\r\n    brandId: string()\r\n        .required(\"This field must not be empty.\"),\r\n    purchaseDate: date()\r\n        .required(\"This field must not be empty.\"),\r\n    currency: string()\r\n        .required(\"This field must not be empty.\"),\r\n    price: number()\r\n        .required(\"This field must not be empty.\"),\r\n    payee: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(30, \"This field must be at most 50 characters long.\")\r\n});\r\n","import axios from \"axios\";\r\nimport Types from \"./brand.types\";\r\n\r\nexport function getBrands() {\r\n    return {\r\n        type: Types.GET_BRANDS,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: \"/api/brands\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function createBrand(formData) {\r\n    return {\r\n        type: Types.POST_BRAND,\r\n        payload: axios({\r\n            method: \"post\",\r\n            data: formData,\r\n            url: \"/api/brands\"\r\n        })\r\n    };\r\n}\r\n\r\nexport function updateBrand(formData, id) {\r\n    return {\r\n        type: Types.PUT_BRAND,\r\n        payload: axios({\r\n            method: \"put\",\r\n            data: formData,\r\n            url: `/api/brands/${id}`\r\n        })\r\n    };\r\n}\r\n\r\nexport function getBrand(id) {\r\n    return {\r\n        type: Types.GET_BRAND,\r\n        payload: axios({\r\n            method: \"get\",\r\n            url: `/api/brands/${id}`\r\n        })\r\n    };\r\n}\r\n","import { Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Divider, Button, Form as SemanticUIForm } from \"semantic-ui-react\";\r\nimport Dropzone from 'react-dropzone';\r\n\r\nimport Types from \"../item.types\";\r\nimport { itemSchema } from \"../item.schema\";\r\nimport { getBrands } from \"../../../brand/client/brand.actions\";\r\nimport { createItem, updateItem, getItem } from \"../item.actions\";\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\nimport { TextInput, RichEditorInput, DropdownInput, FileInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function ItemForm() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n        dispatch(getCategories());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if(id) dispatch(getItem(id));\r\n    }, [id, dispatch]);\r\n\r\n    const item = useSelector(state => state.itemReducer.item);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    const categoryOptions = categories.map(function(option) {\r\n        return { key: option._id, value: option._id, text: option.name };\r\n    });\r\n\r\n    const brandOptions = brands.map(function(option) {\r\n        return { key: option._id, value: option._id, text: option.name };\r\n    });\r\n\r\n    const currencyOptions = [\r\n        { key: \"AUD\", text: \"AUD\", value: \"AUD\" },\r\n        { key: \"BDT\", text: \"BDT\", value: \"BDT\" },\r\n        { key: \"BGN\", text: \"BGN\", value: \"BGN\" },\r\n        { key: \"CAD\", text: \"CAD\", value: \"CAD\" },\r\n        { key: \"CNY\", text: \"CNY\", value: \"CNY\" },\r\n        { key: \"EUR\", text: \"EUR\", value: \"EUR\" },\r\n        { key: \"GBP\", text: \"GBP\", value: \"GBP\" },\r\n        { key: \"INR\", text: \"INR\", value: \"INR\" },\r\n        { key: \"JPY\", text: \"JPY\", value: \"JPY\" },\r\n        { key: \"NZD\", text: \"NZD\", value: \"NZD\" },\r\n        { key: \"RUB\", text: \"RUB\", value: \"RUB\" },\r\n        { key: \"SGD\", text: \"SGD\", value: \"SGD\" },\r\n        { key: \"USD\", text: \"USD\", value: \"USD\" }\r\n    ];\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: item ? item.name : \"\",\r\n                description: item ? item.description : \"\",\r\n                categoryId: item ? item.categoryId : \"\",\r\n                brandId: item ? item.brandId : \"\",\r\n                purchaseDate: item?.purchaseDate ? format(parseISO(item.purchaseDate), \"y-MM-d\") : \"\",\r\n                price: item ? item.price : \"\",\r\n                currency: item ? item.currency : \"\",\r\n                payee: item ? item.payee : \"\",\r\n                images: \"\",\r\n                invoice: \"\"\r\n                // images: []\r\n            }}\r\n            displayName=\"ItemForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={itemSchema}\r\n            onSubmit={(values, actions) => {\r\n                let formData = new FormData();\r\n\r\n                if(values.images) {\r\n                    for(let index = 0; index < values.images.length; index++) {\r\n                        formData.append(\"images\", values.images[index]);\r\n                    }\r\n                    delete values.images;\r\n                }\r\n\r\n                if(values.invoice) {\r\n                    formData.append(\"invoice\", values.invoice);\r\n                    delete values.invoice;\r\n                }\r\n\r\n                for(const key in values) {\r\n                    if(values[key] && values.hasOwnProperty(key)) {\r\n                        formData.append(key, values[key]);\r\n                    }\r\n                }\r\n\r\n                if(id) {\r\n                    dispatch(updateItem(formData, id)).then(result => {\r\n                        const { type } = result.action;\r\n\r\n                        if(type === Types.PUT_ITEM_FULFILLED) {\r\n                            window.location.reload();\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch(createItem(formData)).then(result => {\r\n                        const { type, payload } = result.action;\r\n\r\n                        if(type === Types.POST_ITEM_FULFILLED) {\r\n                            navigate(`/items/${payload.data._id}`);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\" encType=\"multipart/form-data\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <RichEditorInput attributes={{\r\n                        value: formikProps.values.description,\r\n                        name: \"description\",\r\n                        label: \"Description\",\r\n                        placeholder: \"Item description goes here...\",\r\n                        setFieldValue: formikProps.setFieldValue\r\n                    }}/>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.categoryId,\r\n                            name: \"categoryId\",\r\n                            placeholder: \"Select category\",\r\n                            label: \"Category\",\r\n                            options: categoryOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.brandId,\r\n                            name: \"brandId\",\r\n                            placeholder: \"Select brand\",\r\n                            label: \"Brand\",\r\n                            options: brandOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <TextInput attributes={{\r\n                            type: \"number\",\r\n                            name: \"price\",\r\n                            label: \"Price\",\r\n                            required: true\r\n                        }}/>\r\n                        <DropdownInput attributes={{\r\n                            value: formikProps.values.currency,\r\n                            name: \"currency\",\r\n                            placeholder: \"Select currency\",\r\n                            label: \"Currency\",\r\n                            options: currencyOptions,\r\n                            onChange: (event, data) => {formikProps.setFieldValue(data.name, data.value)},\r\n                            required: true\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <SemanticUIForm.Group widths=\"equal\">\r\n                        <TextInput attributes={{\r\n                            type: \"date\",\r\n                            name: \"purchaseDate\",\r\n                            label: \"Purchase date\",\r\n                            required: true\r\n                        }}/>\r\n\r\n                        <TextInput attributes={{\r\n                            type: \"text\",\r\n                            name: \"payee\",\r\n                            label: \"Payee\"\r\n                        }}/>\r\n                    </SemanticUIForm.Group>\r\n\r\n                    <FileInput attributes={{\r\n                        type: \"file\",\r\n                        name: \"images\",\r\n                        label: \"Upload images\",\r\n                        multiple: true,\r\n                        info: \"You can upload a maximum of 3 images at a time. The max file size limit is 1.5 MB.\",\r\n                        onChange: event => {formikProps.setFieldValue(\"images\", event.currentTarget.files)}\r\n                    }}/>\r\n\r\n                    {/* <Dropzone\r\n                        multiple\r\n                        onDrop={acceptedFiles => {\r\n                            if (acceptedFiles.length === 0) return;\r\n                            formikProps.setFieldValue(\"images\", formikProps.values.images.concat(acceptedFiles));\r\n                        }}\r\n                    >\r\n                        {({getRootProps, getInputProps}) => (\r\n                            <section>\r\n                                <div {...getRootProps()}>\r\n                                    <input {...getInputProps()} />\r\n                                    <p>Drag 'n' drop some files here, or click to select files</p>\r\n                                </div>\r\n                            </section>\r\n                        )}\r\n                    </Dropzone> */}\r\n\r\n                    <FileInput attributes={{\r\n                        type: \"file\",\r\n                        name: \"invoice\",\r\n                        label: \"Upload invoice\",\r\n                        info: \"The max file size limit is 1.5 MB.\",\r\n                        onChange: event => {formikProps.setFieldValue(\"invoice\", event.currentTarget.files[0])}\r\n                    }}/>\r\n\r\n                    <Divider hidden/>\r\n\r\n                    <Button.Group>\r\n                        <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                        <Button.Or/>\r\n                        <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                    </Button.Group>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FormattedDate, FormattedNumber } from \"react-intl\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport { Label, Message, Icon, Divider, Grid, Image, Item, Button, Header, Card, Breadcrumb, Modal, TransitionablePortal } from \"semantic-ui-react\";\r\n\r\nimport Types from \"../item.types\";\r\nimport ItemForm from \"./item-form.component\";\r\nimport { getItem, deleteItem, setAsActiveImage, deleteImage } from \"../item.actions\";\r\n\r\nexport default function ItemDetails() {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const item = useSelector(state => state.itemReducer.item);\r\n    const user = useSelector(state => state.userReducer.loggedInUser);\r\n\r\n    const [itemFormVisibleState, setItemFormVisibleState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getItem(id));\r\n    }, [dispatch]);\r\n\r\n    const onDeleteItem = id => {\r\n        if(confirm(\"Are you sure? All images associated with this item will be removed too.\")) {\r\n            dispatch(deleteItem(id)).then(function(result) {\r\n                const { type } = result.action;\r\n\r\n                if(type === Types.DELETE_ITEM_FULFILLED) {\r\n                    navigate(\"/items\");\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const onDeleteImage = (itemId, fileId) => {\r\n        if(confirm(\"Are you sure you want to delete this image?\")) {\r\n            dispatch(deleteImage(itemId, fileId));\r\n        }\r\n    };\r\n\r\n    if(!item) {\r\n        return (\r\n            <Message icon warning>\r\n                <Icon name=\"warning sign\" size=\"large\"/>\r\n                <Message.Content>\r\n                    <Message.Header>Warning!</Message.Header>\r\n                    Item not found.\r\n                </Message.Content>\r\n            </Message>\r\n        );\r\n    }\r\n\r\n    if(item.files?.length) {\r\n        item.activeImage = item.files.find(x => x.active === true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb size=\"small\">\r\n                <Link to=\"/items\">\r\n                    <Breadcrumb.Section>Items</Breadcrumb.Section>\r\n                </Link>\r\n                <Breadcrumb.Divider icon=\"right arrow\"/>\r\n                <Link to={`/items?categoryId=${item.category._id}`}>\r\n                    <Breadcrumb.Section>{item.category.name}</Breadcrumb.Section>\r\n                </Link>\r\n                <Breadcrumb.Divider icon=\"right arrow\"/>\r\n                <Breadcrumb.Section active>{item.name}</Breadcrumb.Section>\r\n            </Breadcrumb>\r\n\r\n            <Divider hidden/>\r\n\r\n            <Grid>\r\n                <Grid.Column width={10}>\r\n                    { item.activeImage &&\r\n                        <Image src={item.activeImage.secure_url} alt={item.name}/>\r\n                    }\r\n\r\n                    { item.files && item.files.length === 0 &&\r\n                        <Message warning icon>\r\n                        <Icon name=\"warning sign\" size=\"large\"/>\r\n                            <Message.Content>\r\n                                <Message.Header>Warning!</Message.Header>\r\n                                No images are found for this item. <Link to={`/items/${item._id}/edit`}>Consider editing the item</Link>.\r\n                            </Message.Content>\r\n                        </Message>\r\n                    }\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={6}>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Header as=\"h3\">{item.name}</Header>\r\n                            <Divider hidden/>\r\n\r\n                            <Divider horizontal>Meta Informations</Divider>\r\n\r\n                            <Item.Meta>\r\n                                <div>Category: <Link to={`/items?categoryId=${item.category._id}`}>{item.category.name}</Link></div>\r\n                                <div>Brand: <Link to={`/items?brandId=${item.brand._id}`}>{item.brand.name}</Link></div>\r\n                                { item.price &&\r\n                                    <div>Price: <FormattedNumber value={item.price} style=\"currency\" currency={item.currency}/></div>\r\n                                }\r\n                                <div>Purchase Date: <FormattedDate value={item.purchaseDate} day=\"2-digit\" month=\"long\" year=\"numeric\"/></div>\r\n                                { item.invoice &&\r\n                                    <a href={`https://res.cloudinary.com/shibbir/image/upload/fl_attachment:invoice-${item._id}/${item.invoice.public_id}`}>Download invoice</a>\r\n                                }\r\n                            </Item.Meta>\r\n\r\n                            <Divider horizontal>Specifications</Divider>\r\n\r\n                            <Item.Description>\r\n                                { item.description &&\r\n                                    <div dangerouslySetInnerHTML={{ __html: item.description }}></div>\r\n                                }\r\n                                { !item.description &&\r\n                                    <div>Not available at the moment.</div>\r\n                                }\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n\r\n                    { user && !user.isAdmin &&\r\n                        <>\r\n                            <Divider section/>\r\n\r\n                            <Button color=\"blue\" onClick={() => setItemFormVisibleState(true)}>\r\n                                <Icon name=\"pencil\"/> Edit\r\n                            </Button>\r\n\r\n                            <Button color=\"red\" onClick={() => onDeleteItem(id)}>\r\n                                <Icon name=\"trash\"/> Delete\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n            { item.files && item.files.length > 0 &&\r\n                <div>\r\n                    <Divider hidden/>\r\n                    <h2>Manage images</h2>\r\n                    <Divider section/>\r\n\r\n                    <Card.Group>\r\n                        { item.files.map((file) => {\r\n                            return (\r\n                                <Card key={file._id} raised>\r\n                                    { file.active &&\r\n                                        <Label color=\"teal\" corner=\"right\" size=\"small\">\r\n                                            <Icon name=\"pin\"/>\r\n                                        </Label>\r\n                                    }\r\n\r\n                                    <Card.Content className=\"ui center aligned\">\r\n                                        <Image src={file.secure_url} size=\"small\"/>\r\n                                    </Card.Content>\r\n\r\n                                    { user && !user.isAdmin &&\r\n                                        <Card.Content extra>\r\n                                            <a onClick={() => dispatch(setAsActiveImage(item._id, file._id))} disabled={file.active}>\r\n                                                <Icon color=\"teal\" name=\"checkmark\"/>\r\n                                                Set as active\r\n                                            </a>\r\n\r\n                                            <div className=\"right floated\">\r\n                                                <a onClick={() => onDeleteImage(item._id, file._id)}>\r\n                                                    <Icon color=\"red\" name=\"delete\"/>\r\n                                                    Discard\r\n                                                </a>\r\n                                            </div>\r\n                                        </Card.Content>\r\n                                    }\r\n                                </Card>\r\n                            );\r\n                        })}\r\n                    </Card.Group>\r\n                </div>\r\n            }\r\n\r\n            <TransitionablePortal open={itemFormVisibleState} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Item Form</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <ItemForm id={id}/>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setItemFormVisibleState(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n        </>\r\n    );\r\n}\r\n","import queryString from \"query-string\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { getItems } from \"../item.actions\";\r\nimport ItemForm from \"./item-form.component\";\r\nimport { getBrands } from \"../../../brand/client/brand.actions\";\r\nimport { getCategories } from \"../../../category/client/category.actions\";\r\nimport { Label, Form, Button, Card, Divider, Icon, Menu, Container, Image, Segment, Header, Modal, TransitionablePortal, Grid } from \"semantic-ui-react\";\r\n\r\nexport default function Items() {\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const [filterModal, setFilterModal] = useState(false);\r\n    const [itemFormVisibleState, setItemFormVisibleState] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n        dispatch(getCategories());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(getItems(location.search));\r\n    }, [location.search]);\r\n\r\n    const params = queryString.parse(location.search);\r\n\r\n    const [brandId, setBrandId] = useState(params.brandId ? params.brandId : \"\");\r\n    const [categoryId, setCategoryId] = useState(params.categoryId ? params.categoryId : \"\");\r\n    const [startDate, setStartDate] = useState(params.startDate ? params.startDate : \"\");\r\n    const [endDate, setEndDate] = useState(params.endDate ? params.endDate : \"\");\r\n\r\n    function filter(e, discard) {\r\n        const q = {};\r\n\r\n        if(categoryId && discard !== \"category\") {\r\n            q.categoryId = categoryId;\r\n        }\r\n\r\n        if(brandId && discard !== \"brand\") {\r\n            q.brandId = brandId;\r\n        }\r\n\r\n        if(startDate && endDate && discard !== \"date\") {\r\n            q.startDate = startDate;\r\n            q.endDate = endDate;\r\n        }\r\n\r\n        if(location.search === `?${queryString.stringify(q)}`) return;\r\n\r\n        navigate({\r\n            pathname: \"/items\",\r\n            search: queryString.stringify(q)\r\n        });\r\n\r\n        setFilterModal(false);\r\n    }\r\n\r\n    function resetFilter() {\r\n        setBrandId(\"\");\r\n        setCategoryId(\"\");\r\n        setStartDate(\"\");\r\n        setEndDate(\"\");\r\n\r\n        if(params.categoryId || params.brandId || params.startDate || params.endDate) {\r\n            navigate(\"items\");\r\n        }\r\n    }\r\n\r\n    let brandName = null;\r\n    let categoryName = null;\r\n    let dateRange = null;\r\n\r\n    const { data, metadata } = useSelector(state => state.itemReducer.items);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n\r\n    if(params.categoryId && categories.length) {\r\n        categoryName = categories.find(x => x._id === params.categoryId).name;\r\n    }\r\n\r\n    if(params.brandId && brands.length) {\r\n        brandName = brands.find(x => x._id === params.brandId).name;\r\n    }\r\n\r\n    if(params.startDate && params.endDate) {\r\n        dateRange = `${startDate}-${endDate}`;\r\n    }\r\n\r\n    const categoryOptions = categories.map(option => ({ key: option._id, value: option._id, text: option.name }));\r\n\r\n    const brandOptions = brands.map((option) => ({ key: option._id, value: option._id, text: option.name }));\r\n\r\n    const cards = data.map(function(item) {\r\n        const activeImage = item.files.find(x => x.active) ? item.files.find(x => x.active).secure_url : item.files[0]?.secure_url;\r\n\r\n        return (\r\n            <Link key={item._id} className=\"ui raised card\" to={item._id}>\r\n                <Card.Content header={item.name} className=\"ui center aligned\"/>\r\n                <Card.Content className=\"ui center aligned image-wrapper\">\r\n                    { activeImage\r\n                        ? <Image src={activeImage} alt={item.name}/>\r\n                        : \"Image not available!\"\r\n                    }\r\n                </Card.Content>\r\n            </Link>\r\n        );\r\n    });\r\n\r\n    let paginationLinks = [];\r\n\r\n    for(let idx = 1; idx <= metadata.pageCount; idx++) {\r\n        paginationLinks.push({\r\n            idx,\r\n            link: {\r\n                pathname: location.pathname,\r\n                search: queryString.stringify({ ...params, page: idx })\r\n            },\r\n            isActive: !params.page && idx === 1 || +params.page === idx\r\n        });\r\n    }\r\n\r\n    paginationLinks = paginationLinks.map(function(page) {\r\n        return (\r\n            <Menu.Item active={page.isActive} key={page.idx}>\r\n                <Link to={page.link}>{page.idx}</Link>\r\n            </Menu.Item>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Segment raised stacked>\r\n                <Grid columns={2}>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Header as=\"h3\">\r\n                                <Icon name=\"archive\" circular/>\r\n                                <Header.Content>\r\n                                    Total Gadgets: {metadata.totalCount}\r\n                                    <Header.Subheader>Add, edit, sort and filter your gadgets <Icon name=\"angle double right\"></Icon></Header.Subheader>\r\n                                </Header.Content>\r\n                            </Header>\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column>\r\n                            <Button floated=\"right\" size=\"small\" color=\"blue\" onClick={() => setItemFormVisibleState(true)}>\r\n                                Add new item\r\n                            </Button>\r\n                            <Button floated=\"right\" size=\"small\" onClick={() => setFilterModal(true)}>\r\n                                <Icon color=\"teal\" name=\"filter\"/> Filter\r\n                            </Button>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n\r\n            <TransitionablePortal open={filterModal} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Filter</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <Form onSubmit={filter}>\r\n                                <Form.Group widths=\"equal\">\r\n                                    <Form.Field>\r\n                                        <label>Category</label>\r\n                                        <Form.Select\r\n                                            placeholder=\"Choose an option\"\r\n                                            name=\"categoryId\"\r\n                                            options={categoryOptions}\r\n                                            value={categoryId}\r\n                                            onChange={(event, data) => {setCategoryId(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n\r\n                                    <Form.Field>\r\n                                        <label>Brand</label>\r\n                                        <Form.Select\r\n                                            placeholder=\"Choose an option\"\r\n                                            name=\"brandId\"\r\n                                            options={brandOptions}\r\n                                            value={brandId}\r\n                                            onChange={(event, data) => {setBrandId(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group widths=\"equal\">\r\n                                    <Form.Field>\r\n                                        <label>Start Date</label>\r\n                                        <Form.Input\r\n                                            type=\"date\"\r\n                                            placeholder=\"Choose a date\"\r\n                                            name=\"startDate\"\r\n                                            value={startDate}\r\n                                            onChange={(event, data) => {setStartDate(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n\r\n                                    <Form.Field>\r\n                                        <label>End Date</label>\r\n                                        <Form.Input\r\n                                            type=\"date\"\r\n                                            placeholder=\"Choose a date\"\r\n                                            name=\"endDate\"\r\n                                            value={endDate}\r\n                                            onChange={(event, data) => {setEndDate(data.value)}}\r\n                                        />\r\n                                    </Form.Field>\r\n                                </Form.Group>\r\n\r\n                                <Button.Group>\r\n                                    <Button type=\"submit\" positive>\r\n                                        <Icon name=\"filter\"/> Apply\r\n                                    </Button>\r\n                                    <Button.Or />\r\n                                    <Button type=\"button\" onClick={resetFilter}>\r\n                                        <Icon name=\"undo\"/> Reset\r\n                                    </Button>\r\n                                </Button.Group>\r\n                            </Form>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setFilterModal(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n\r\n            { categoryName &&\r\n                <Label color=\"blue\">\r\n                    Category: {categoryName} <Icon name=\"delete\" onClick={(e) => { setCategoryId(\"\"); filter(e, \"category\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            { brandName &&\r\n                <Label color=\"blue\">\r\n                    Brand: {brandName} <Icon name=\"delete\" onClick={(e) => { setBrandId(\"\"); filter(e, \"brand\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            { dateRange &&\r\n                <Label color=\"blue\">\r\n                    Date Range: {dateRange} <Icon name=\"delete\" onClick={(e) => { setStartDate(\"\"); setEndDate(\"\"); filter(e, \"date\"); }}/>\r\n                </Label>\r\n            }\r\n\r\n            <Divider hidden/>\r\n\r\n            { cards.length > 0 &&\r\n                <div id=\"item-cards-container\">\r\n                    <Card.Group itemsPerRow={5} stackable>\r\n                        {cards}\r\n                    </Card.Group>\r\n\r\n                    { metadata.pageCount !== 1 &&\r\n                        <div>\r\n                            <Divider hidden/>\r\n                            <Container textAlign=\"center\">\r\n                                <Menu pagination>\r\n                                    {paginationLinks}\r\n                                </Menu>\r\n                            </Container>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n\r\n            { cards.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\" />\r\n                        You don't have any items!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n\r\n            <TransitionablePortal open={itemFormVisibleState} transition={{ animation: \"scale\", duration: 400 }}>\r\n                <Modal dimmer size=\"small\" open={true}>\r\n                    <Modal.Header>Item Form</Modal.Header>\r\n                    <Modal.Content>\r\n                        <Modal.Description>\r\n                            <ItemForm/>\r\n                        </Modal.Description>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button color=\"black\" onClick={() => setItemFormVisibleState(false)}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </TransitionablePortal>\r\n        </>\r\n    );\r\n}\r\n","import { string, object } from \"yup\";\r\n\r\nexport default object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(30, \"This field must be at most 30 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Form, Formik } from \"formik\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport BrandSchema from \"./brand.schema\";\r\nimport { createBrand, updateBrand, getBrand } from \"./brand.actions\";\r\nimport { TextInput } from \"../../core/client/components/FieldInputs\";\r\n\r\nfunction BrandForm({id} = props) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            dispatch(getBrand(id));\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const brand = useSelector(state => state.brandReducer.brand);\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: id && brand ? brand.name : \"\"\r\n            }}\r\n            displayName=\"BrandForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={BrandSchema}\r\n            onSubmit={(values, actions) => {\r\n                if(id) {\r\n                    dispatch(updateBrand(values, id)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                    });\r\n                } else {\r\n                    dispatch(createBrand(values)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                        actions.resetForm();\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <Divider hidden/>\r\n                    <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                    <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nBrandForm.propTypes = {\r\n    id: PropTypes.string\r\n};\r\n\r\nexport default BrandForm;\r\n","import { Link } from \"react-router-dom\";\r\nimport { FormattedDate } from \"react-intl\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Table, Segment, Icon, Header, Button, Modal, TransitionablePortal, Divider } from \"semantic-ui-react\";\r\nimport { getBrands } from \"./brand.actions\";\r\nimport BrandForm from \"./brand-form.component\";\r\n\r\nexport default function Brands() {\r\n    const dispatch = useDispatch();\r\n    const [brandId, setBrandId] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        dispatch(getBrands());\r\n    }, []);\r\n\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n    const brands = useSelector(state => state.brandReducer.brands);\r\n\r\n    const rows = brands.map(function(brand, index) {\r\n        return (\r\n            <Table.Row key={brand._id}>\r\n                <Table.Cell>{index+1}</Table.Cell>\r\n                <Table.Cell>{brand.name}</Table.Cell>\r\n                <Table.Cell><FormattedDate value={brand.date} day=\"2-digit\" month=\"long\" year=\"numeric\"/></Table.Cell>\r\n                <Table.Cell>\r\n                    <Link to={`/items?brandId=${brand._id}`}>\r\n                        <Icon color='teal' name=\"external alternate\"/>\r\n                        {brand.items ? brand.items.length : 0} item(s)\r\n                    </Link>\r\n                </Table.Cell>\r\n                <Table.Cell>\r\n                    { loggedInUser?._id === brand.createdBy &&\r\n                        <a onClick={() => setBrandId(brand._id)}>\r\n                            <Icon name=\"edit\" color=\"teal\"/>\r\n                        </a>\r\n                    }\r\n\r\n                    { loggedInUser?._id !== brand.createdBy &&\r\n                        <Icon name=\"lock\" color=\"black\"/>\r\n                    }\r\n                </Table.Cell>\r\n            </Table.Row>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            { brands.length > 0 &&\r\n                <>\r\n                    <Button floated=\"right\" primary size=\"small\" onClick={() => setBrandId(null)}>\r\n                        Add new brand\r\n                    </Button>\r\n\r\n                    <Divider hidden clearing/>\r\n\r\n                    <Table selectable compact>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>#</Table.HeaderCell>\r\n                                <Table.HeaderCell>Name</Table.HeaderCell>\r\n                                <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n                                <Table.HeaderCell>Items</Table.HeaderCell>\r\n                                <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n\r\n                        <Table.Body>\r\n                            {rows}\r\n                        </Table.Body>\r\n                    </Table>\r\n\r\n                    <TransitionablePortal open={brandId !== undefined} transition={{ animation: \"scale\", duration: 400 }}>\r\n                        <Modal dimmer size=\"tiny\" open={true}>\r\n                            <Modal.Header>Brand Form</Modal.Header>\r\n                            <Modal.Content>\r\n                                <Modal.Description>\r\n                                    <BrandForm id={brandId}/>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color=\"black\" onClick={() => setBrandId(undefined)}>\r\n                                    Close\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </TransitionablePortal>\r\n                </>\r\n            }\r\n\r\n            { brands.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        No brands are available!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import { string, object } from \"yup\";\r\n\r\nexport default object().shape({\r\n    name: string()\r\n        .min(2, \"This field must be at least 2 characters long.\")\r\n        .max(20, \"This field must be at most 20 characters long.\")\r\n        .required(\"This field must not be empty.\")\r\n});\r\n","import { Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport iziToast from \"izitoast/dist/js/iziToast\";\r\nimport { Divider, Button } from \"semantic-ui-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport CategorySchema from \"../category.schema\";\r\nimport { createCategory, updateCategory, getCategory } from \"../category.actions\";\r\nimport { TextInput } from \"../../../core/client/components/FieldInputs\";\r\n\r\nexport default function CategoryForm({id} = props) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            dispatch(getCategory(id));\r\n        }\r\n    }, [id, dispatch]);\r\n\r\n    const category = useSelector(state => state.categoryReducer.category);\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: id && category ? category.name : \"\",\r\n                group: id && category ? category.group : \"\"\r\n            }}\r\n            displayName=\"CategoryForm\"\r\n            enableReinitialize={true}\r\n            validationSchema={CategorySchema}\r\n            onSubmit={(values, actions) => {\r\n                if(id) {\r\n                    dispatch(updateCategory(values, id)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                    });\r\n                } else {\r\n                    dispatch(createCategory(values)).then(function() {\r\n                        iziToast[\"success\"]({\r\n                            timeout: 3000,\r\n                            message: \"Your changes are saved.\",\r\n                            position: \"bottomRight\"\r\n                        });\r\n                        actions.resetForm();\r\n                    });\r\n                }\r\n\r\n                actions.setSubmitting(false);\r\n            }}\r\n        >\r\n            {formikProps => (\r\n                <Form onSubmit={formikProps.handleSubmit} className=\"ui form\">\r\n                    <TextInput attributes={{\r\n                        type: \"text\",\r\n                        name: \"name\",\r\n                        label: \"Name\",\r\n                        required: true\r\n                    }}/>\r\n                    <Divider hidden/>\r\n                    <Button.Group>\r\n                        <Button type=\"submit\" positive disabled={formikProps.isSubmitting}>Save changes</Button>\r\n                        <Button.Or/>\r\n                        <Button type=\"reset\" disabled={formikProps.isSubmitting}>Reset</Button>\r\n                    </Button.Group>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Icon, Divider, Segment, Button, Modal, Header, TransitionablePortal, Card } from \"semantic-ui-react\";\r\n\r\nimport CategoryForm from \"./category-form.component\";\r\nimport { getCategories } from \"../category.actions\";\r\n\r\nexport default function Categories() {\r\n    const dispatch = useDispatch();\r\n    const [categoryId, setCategoryId] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategories());\r\n    }, []);\r\n\r\n    const loggedInUser = useSelector(state => state.userReducer.loggedInUser);\r\n    const categories = useSelector(state => state.categoryReducer.categories);\r\n\r\n    const cards = categories.map(function(category) {\r\n        return (\r\n            <Card key={category._id}>\r\n                <Card.Content>\r\n                    <Card.Header>{category.name}</Card.Header>\r\n                    <Card.Meta>{category.items ? category.items.length : 0} Items</Card.Meta>\r\n                    <Card.Description>\r\n                        Steve wants to add you to the group <strong>best friends</strong>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Link to={`/items?categoryId=${category._id}`} className=\"ui button basic blue\">\r\n                        <Icon name=\"external alternate\" color=\"teal\"/> Show Items\r\n                    </Link>\r\n                    { loggedInUser?.isAdmin &&\r\n                        <a onClick={() => setCategoryId(category._id)} className=\"ui button\">\r\n                            <Icon name=\"pencil\" color=\"teal\"/> Edit\r\n                        </a>\r\n                    }\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            { categories.length > 0 &&\r\n                <>\r\n                    { loggedInUser?.isAdmin &&\r\n                        <Button floated=\"right\" primary size=\"small\" onClick={() => setCategoryId(null)}>\r\n                            Add new category\r\n                        </Button>\r\n                    }\r\n\r\n                    <Divider hidden clearing/>\r\n\r\n                    <Card.Group itemsPerRow={4} stackable>\r\n                        {cards}\r\n                    </Card.Group>\r\n\r\n                    <TransitionablePortal open={categoryId !== undefined} transition={{ animation: \"scale\", duration: 400 }}>\r\n                        <Modal dimmer size=\"tiny\" open={true}>\r\n                            <Modal.Header>Category Form</Modal.Header>\r\n                            <Modal.Content>\r\n                                <Modal.Description>\r\n                                    <CategoryForm id={categoryId}/>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n                            <Modal.Actions>\r\n                                <Button color=\"black\" onClick={() => setCategoryId(undefined)}>\r\n                                    Close\r\n                                </Button>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    </TransitionablePortal>\r\n                </>\r\n            }\r\n\r\n            { categories.length === 0 &&\r\n                <Segment placeholder raised>\r\n                    <Header icon>\r\n                        <Icon name=\"warning sign\"/>\r\n                        No categories are available!\r\n                    </Header>\r\n                </Segment>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\n\r\nimport \"fomantic-ui-css/semantic.css\";\r\nimport \"izitoast/dist/css/iziToast.css\";\r\nimport \"./app.component.css\";\r\n\r\nimport NoMatch from \"./NoMatch\";\r\nimport PublicLayoutRoute from \"./PublicLayoutRoute\";\r\nimport PrivateLayoutRoute from \"./PrivateLayoutRoute\";\r\nimport Login from \"../../user/client/components/login.component\";\r\nimport Register from \"../../user/client/components/register.component\";\r\nimport ResetPassword from \"../../user/client/components/ResetPassword\";\r\nimport Profile from \"../../user/client/components/profile.component\";\r\nimport Dashboard from \"../../user/client/components/dashboard.component\";\r\nimport { getSignedInUserProfile } from \"../../user/client/user.actions\";\r\n\r\nimport Item from \"../../item/client/components/item.component\";\r\nimport Items from \"../../item/client/components/items.component\";\r\nimport Brands from \"../../brand/client/brands.component\";\r\nimport Categories from \"../../category/client/components/categories.component\";\r\n\r\nlet refCount = 0;\r\n\r\nfunction setLoading(isLoading) {\r\n    if (isLoading) {\r\n        refCount++;\r\n        document.getElementById(\"loader\").style = \"display: block\";\r\n    } else if (refCount > 0) {\r\n        refCount--;\r\n        if(refCount > 0) document.getElementById(\"loader\").style = \"display: block\";\r\n        else document.getElementById(\"loader\").style = \"display: none\";\r\n    }\r\n}\r\n\r\naxios.interceptors.request.use(config => {\r\n    setLoading(true);\r\n    return config;\r\n}, error => {\r\n    setLoading(false);\r\n    return Promise.reject(error);\r\n});\r\n\r\naxios.interceptors.response.use(response => {\r\n    setLoading(false);\r\n    return response;\r\n}, error => {\r\n    setLoading(false);\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default function App() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getSignedInUserProfile());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Routes>\r\n            <Route element={<PublicLayoutRoute/>}>\r\n                <Route path=\"login\" element={<Login/>}/>\r\n                <Route path=\"register\" element={<Register/>}/>\r\n                <Route path=\"reset-password\" element={<ResetPassword/>}/>\r\n            </Route>\r\n\r\n            <Route element={<PrivateLayoutRoute/>}>\r\n                <Route path=\"/\" element={<Dashboard/>}/>\r\n                <Route path=\"profile\" element={<Profile/>}/>\r\n                <Route path=\"items\" element={<Items/>}/>\r\n                <Route path=\"items/:id\" element={<Item/>}/>\r\n                <Route path=\"brands\" element={<Brands/>}/>\r\n                <Route path=\"categories\" element={<Categories/>}/>\r\n            </Route>\r\n\r\n            <Route path=\"*\" element={<NoMatch/>}/>\r\n        </Routes>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport store from \"./store\";\r\nimport App from \"./app.component\";\r\n\r\nconst root = createRoot(document.getElementById(\"app\"));\r\n\r\nroot.render(\r\n    <Provider store={store}>\r\n        <IntlProvider locale=\"en\">\r\n            <BrowserRouter future={{ v7_startTransition: true }}>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </IntlProvider>\r\n    </Provider>\r\n);\r\n"],"names":["LOGIN","LOGIN_FULFILLED","REGISTER","REGISTER_FULFILLED","GET_PROFILE","GET_PROFILE_FULFILLED","CHANGE_PASSWORD","RESET_PASSWORD","DISCONNECT_PROVIDER","DISCONNECT_PROVIDER_FULFILLED","initialState","loggedInUser","POST_ITEM","POST_ITEM_FULFILLED","POST_ITEM_REJECTED","PUT_ITEM","PUT_ITEM_FULFILLED","PUT_ITEM_REJECTED","GET_ITEM","GET_ITEM_PENDING","GET_ITEM_FULFILLED","GET_ITEM_REJECTED","GET_ITEMS","GET_ITEMS_FULFILLED","DELETE_ITEM","DELETE_ITEM_FULFILLED","DELETE_ITEM_IMAGE","UPDATE_ITEM_IMAGE","UPDATE_ITEM_IMAGE_FULFILLED","DELETE_ITEM_IMAGE_FULFILLED","GET_ITEMS_BY_YEAR","GET_ITEMS_BY_YEAR_FULFILLED","item","itemsPerYear","items","data","metadata","pages","GET_BRANDS","GET_BRANDS_FULFILLED","POST_BRAND","POST_BRAND_FULFILLED","PUT_BRAND","PUT_BRAND_FULFILLED","GET_BRAND","GET_BRAND_FULFILLED","brands","brand","GET_CATEGORIES","GET_CATEGORIES_FULFILLED","GET_CATEGORIES_REJECTED","POST_CATEGORY","POST_CATEGORY_FULFILLED","PUT_CATEGORY","PUT_CATEGORY_FULFILLED","PUT_CATEGORY_REJECTED","GET_CATEGORY","GET_CATEGORY_PENDING","GET_CATEGORY_FULFILLED","GET_CATEGORY_REJECTED","categories","category","combineReducers","userReducer","state","arguments","length","undefined","action","type","Types","_objectSpread","payload","itemReducer","files","brandReducer","concat","map","x","_id","name","categoryReducer","configureStore","reducer","reducers","middleware","promise","thunkMiddleware","NoMatch","React","Container","Divider","hidden","Segment","placeholder","Header","icon","Icon","color","Inline","Button","primary","href","PublicLayoutRoute","_location$state","location","useLocation","useSelector","Navigate","to","from","pathname","replace","Outlet","Navbar","Menu","stackable","borderless","Item","header","style","paddingLeft","src","NavLink","className","_ref","isActive","_ref2","_ref3","_ref4","paddingRight","marginLeft","Footer","rel","PrivateLayoutRoute","loginSchema","object","shape","email","string","required","password","registerSchema","min","max","changePasswordSchema","currentPassword","newPassword","confirmNewPassword","oneOf","ref","resetPasswordSchema","forgotPasswordSchema","IdentityProviders","horizontal","TextInput","attributes","Form","Field","label","autoComplete","ErrorMessage","RichEditorInput","Editor","apiKey","process","value","init","height","menubar","plugins","toolbar","content_style","onEditorChange","content","setFieldValue","DropdownInput","Select","_extends","search","options","FileInput","_ref5","margin","multiple","accept","onChange","info","Login","dispatch","useDispatch","recaptchaRef","useRef","_useState","useState","_useState2","_slicedToArray","emailSent","setEmailSent","_useState3","_useState4","isPasswordResetModalActive","setIsPasswordResetModalActive","_useState5","_useState6","forgotpasswordResponse","setForgotpasswordResponse","maxWidth","as","Image","Formik","initialValues","validationSchema","onSubmit","values","actions","current","executeAsync","then","recaptchaToken","formData","username","grant_type","axios","method","url","err","iziToast","timeout","title","response","status","message","position","reset","setSubmitting","ReCAPTCHA","size","sitekey","fluid","onClick","Modal","dimmer","open","Message","Content","error","post","resetForm","Description","id","Actions","loading","form","positive","labelPosition","Link","Register","displayName","formikProps","handleSubmit","iconPosition","disabled","isSubmitting","ResetPassword","isPasswordReset","setPasswordResetStatus","query","ManageOauth","onRemoveOauthProvider","provider","confirm","removeOauthProvider","section","List","divided","relaxed","verticalAlign","facebook","google","ChangePassword","Group","Or","Profile","Grid","columns","Column","vertical","getItem","ItemChart","key","text","Date","getFullYear","yearRange","setYearRange","useEffect","startYear","endYear","_yearRange$split","split","_yearRange$split2","fetchItemsByYearRange","years","property","push","toString","Highcharts","chart","xAxis","crosshair","yAxis","allowDecimals","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","credits","enabled","legend","accessibility","event","defaultValue","_isEmpty","basic","getCategories","CategoryChart","forEach","o","_o$items","y","plotBackgroundColor","plotBorderWidth","plotShadow","pie","allowPointSelect","cursor","dataLabels","showInLegend","colorByPoint","Dashboard","Card","raised","itemSchema","categoryId","brandId","purchaseDate","date","currency","price","number","payee","getBrands","ItemForm","useParams","navigate","useNavigate","categoryOptions","option","brandOptions","currencyOptions","description","format","parseISO","images","invoice","enableReinitialize","FormData","index","append","hasOwnProperty","updateItem","result","window","reload","createItem","_result$action","encType","SemanticUIForm","widths","currentTarget","ItemDetails","_item$files","user","itemFormVisibleState","setItemFormVisibleState","onDeleteItem","deleteItem","onDeleteImage","itemId","fileId","deleteImage","activeImage","find","active","Breadcrumb","Section","width","secure_url","alt","warning","Meta","FormattedNumber","FormattedDate","day","month","year","public_id","dangerouslySetInnerHTML","__html","isAdmin","file","Label","corner","extra","TransitionablePortal","transition","animation","duration","Items","filterModal","setFilterModal","getItems","params","queryString","parse","setBrandId","_useState7","_useState8","setCategoryId","_useState9","startDate","_useState10","setStartDate","_useState11","endDate","_useState12","setEndDate","filter","e","discard","q","stringify","brandName","categoryName","dateRange","_useSelector","cards","_item$files$","paginationLinks","idx","pageCount","link","page","stacked","Row","circular","totalCount","Subheader","floated","Input","itemsPerRow","textAlign","pagination","BrandForm","props","getBrand","BrandSchema","updateBrand","propTypes","PropTypes","Brands","rows","Table","Cell","createdBy","clearing","selectable","compact","HeaderCell","Body","CategoryForm","getCategory","group","CategorySchema","updateCategory","Categories","refCount","setLoading","isLoading","document","getElementById","App","Routes","Route","element","path","interceptors","request","use","config","Promise","reject","createRoot","render","Provider","store","IntlProvider","locale","BrowserRouter","future","v7_startTransition"],"sourceRoot":""}